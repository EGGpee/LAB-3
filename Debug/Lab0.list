
Lab0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005938  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005ac8  08005ac8  00015ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bac  08005bac  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bb4  08005bb4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bb8  08005bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00012f70  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012f80  20012f80  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014955  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c55  00000000  00000000  00034995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  000375f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001180  00000000  00000000  00038878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023333  00000000  00000000  000399f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001564f  00000000  00000000  0005cd2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d50d8  00000000  00000000  0007237a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147452  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e38  00000000  00000000  001474a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ab0 	.word	0x08005ab0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005ab0 	.word	0x08005ab0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MEMS_Write>:
//		i += 1;
//	}
//}

//Lab 3
void MEMS_Write(uint8_t address,uint8_t data){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	460a      	mov	r2, r1
 80004de:	71fb      	strb	r3, [r7, #7]
 80004e0:	4613      	mov	r3, r2
 80004e2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2108      	movs	r1, #8
 80004e8:	480b      	ldr	r0, [pc, #44]	; (8000518 <MEMS_Write+0x44>)
 80004ea:	f000 ff83 	bl	80013f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 80004ee:	1df9      	adds	r1, r7, #7
 80004f0:	230a      	movs	r3, #10
 80004f2:	2201      	movs	r2, #1
 80004f4:	4809      	ldr	r0, [pc, #36]	; (800051c <MEMS_Write+0x48>)
 80004f6:	f001 fd1c 	bl	8001f32 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&data,1,10);
 80004fa:	1db9      	adds	r1, r7, #6
 80004fc:	230a      	movs	r3, #10
 80004fe:	2201      	movs	r2, #1
 8000500:	4806      	ldr	r0, [pc, #24]	; (800051c <MEMS_Write+0x48>)
 8000502:	f001 fd16 	bl	8001f32 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3,GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2108      	movs	r1, #8
 800050a:	4803      	ldr	r0, [pc, #12]	; (8000518 <MEMS_Write+0x44>)
 800050c:	f000 ff72 	bl	80013f4 <HAL_GPIO_WritePin>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40021000 	.word	0x40021000
 800051c:	2000002c 	.word	0x2000002c

08000520 <sensor_init>:
	HAL_SPI_Receive(&hspi1,data,1,10);
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
}

void sensor_init()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
    MEMS_Write(0x21,0x01);
 8000524:	2101      	movs	r1, #1
 8000526:	2021      	movs	r0, #33	; 0x21
 8000528:	f7ff ffd4 	bl	80004d4 <MEMS_Write>
    MEMS_Write(0x23,0x48);
 800052c:	2148      	movs	r1, #72	; 0x48
 800052e:	2023      	movs	r0, #35	; 0x23
 8000530:	f7ff ffd0 	bl	80004d4 <MEMS_Write>
    MEMS_Write(0x20,0x67);
 8000534:	2167      	movs	r1, #103	; 0x67
 8000536:	2020      	movs	r0, #32
 8000538:	f7ff ffcc 	bl	80004d4 <MEMS_Write>
    MEMS_Write(0x24,0x00);
 800053c:	2100      	movs	r1, #0
 800053e:	2024      	movs	r0, #36	; 0x24
 8000540:	f7ff ffc8 	bl	80004d4 <MEMS_Write>
    MEMS_Write(0x57,0x55);
 8000544:	2155      	movs	r1, #85	; 0x55
 8000546:	2057      	movs	r0, #87	; 0x57
 8000548:	f7ff ffc4 	bl	80004d4 <MEMS_Write>
    MEMS_Write(0x40,0x05);
 800054c:	2105      	movs	r1, #5
 800054e:	2040      	movs	r0, #64	; 0x40
 8000550:	f7ff ffc0 	bl	80004d4 <MEMS_Write>
    MEMS_Write(0x41,0x11);
 8000554:	2111      	movs	r1, #17
 8000556:	2041      	movs	r0, #65	; 0x41
 8000558:	f7ff ffbc 	bl	80004d4 <MEMS_Write>
    MEMS_Write(0x59,0xFC);
 800055c:	21fc      	movs	r1, #252	; 0xfc
 800055e:	2059      	movs	r0, #89	; 0x59
 8000560:	f7ff ffb8 	bl	80004d4 <MEMS_Write>
    MEMS_Write(0x5A,0xFC);
 8000564:	21fc      	movs	r1, #252	; 0xfc
 8000566:	205a      	movs	r0, #90	; 0x5a
 8000568:	f7ff ffb4 	bl	80004d4 <MEMS_Write>
    MEMS_Write(0x5B,0x01);
 800056c:	2101      	movs	r1, #1
 800056e:	205b      	movs	r0, #91	; 0x5b
 8000570:	f7ff ffb0 	bl	80004d4 <MEMS_Write>
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}

08000578 <LED_Task>:

void LED_Task(void *pvParameter)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	for(;;){
		HAL_GPIO_TogglePin(ledGreen_GPIO_Port, GPIO_PIN_12);
 8000580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <LED_Task+0x1c>)
 8000586:	f000 ff4e 	bl	8001426 <HAL_GPIO_TogglePin>
		vTaskDelay(500/portTICK_RATE_MS);
 800058a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800058e:	f003 fc97 	bl	8003ec0 <vTaskDelay>
		HAL_GPIO_TogglePin(ledGreen_GPIO_Port, GPIO_PIN_12);
 8000592:	e7f5      	b.n	8000580 <LED_Task+0x8>
 8000594:	40020c00 	.word	0x40020c00

08000598 <vHandlerTask>:
	}

}

void vHandlerTask( void *pvParameters )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

	for(;;)
		{
			/* Take the semaphore */
			// semaphore was obtained
			if(xSemaphoreTake(xSemaphore, 0xFFFF)){
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <vHandlerTask+0x54>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 f8b9 	bl	8003720 <xQueueSemaphoreTake>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0f5      	beq.n	80005a0 <vHandlerTask+0x8>
				uint32_t From_Begin_time;
				// Orange Toggle
				for(int i = 0; i < 5*2; i++){
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	e012      	b.n	80005e0 <vHandlerTask+0x48>
					From_Begin_time = HAL_GetTick();
 80005ba:	f000 fc91 	bl	8000ee0 <HAL_GetTick>
 80005be:	60b8      	str	r0, [r7, #8]
					HAL_GPIO_TogglePin(ledOrange_GPIO_Port, GPIO_PIN_13);
 80005c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <vHandlerTask+0x58>)
 80005c6:	f000 ff2e 	bl	8001426 <HAL_GPIO_TogglePin>
					while(HAL_GetTick()-From_Begin_time < 250/portTICK_RATE_MS){
 80005ca:	bf00      	nop
 80005cc:	f000 fc88 	bl	8000ee0 <HAL_GetTick>
 80005d0:	4602      	mov	r2, r0
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	2bf9      	cmp	r3, #249	; 0xf9
 80005d8:	d9f8      	bls.n	80005cc <vHandlerTask+0x34>
				for(int i = 0; i < 5*2; i++){
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	3301      	adds	r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b09      	cmp	r3, #9
 80005e4:	dde9      	ble.n	80005ba <vHandlerTask+0x22>
						;
					}
				}
				sensor_init();
 80005e6:	f7ff ff9b 	bl	8000520 <sensor_init>
			if(xSemaphoreTake(xSemaphore, 0xFFFF)){
 80005ea:	e7d9      	b.n	80005a0 <vHandlerTask+0x8>
 80005ec:	200000c8 	.word	0x200000c8
 80005f0:	40020c00 	.word	0x40020c00

080005f4 <HAL_GPIO_EXTI_Callback>:
			// reset interrupt register
		}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]
	//Red Toggle
	HAL_GPIO_TogglePin(ledRed_GPIO_Port, GPIO_PIN_14);
 80005fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000602:	480e      	ldr	r0, [pc, #56]	; (800063c <HAL_GPIO_EXTI_Callback+0x48>)
 8000604:	f000 ff0f 	bl	8001426 <HAL_GPIO_TogglePin>

	/* Give the semaphore to unblock the handler task */
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]

	xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_GPIO_EXTI_Callback+0x4c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f107 020c 	add.w	r2, r7, #12
 8000614:	4611      	mov	r1, r2
 8000616:	4618      	mov	r0, r3
 8000618:	f002 ff14 	bl	8003444 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d007      	beq.n	8000632 <HAL_GPIO_EXTI_Callback+0x3e>
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_GPIO_EXTI_Callback+0x50>)
 8000624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	f3bf 8f4f 	dsb	sy
 800062e:	f3bf 8f6f 	isb	sy
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40020c00 	.word	0x40020c00
 8000640:	200000c8 	.word	0x200000c8
 8000644:	e000ed04 	.word	0xe000ed04

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064e:	f000 fc11 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f833 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000656:	f000 f8fb 	bl	8000850 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800065a:	f000 f8cf 	bl	80007fc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800065e:	f000 f897 	bl	8000790 <MX_SPI1_Init>
//  xTaskCreate(Delay_App,"Delay",1000,NULL,14,NULL);
//  xTaskCreate(TaskMonitor_APP,"Monit",1000,NULL,3,NULL);
//  vTaskStartScheduler();

  //Lab 3
  xSemaphore = xSemaphoreCreateBinary();
 8000662:	2203      	movs	r2, #3
 8000664:	2100      	movs	r1, #0
 8000666:	2001      	movs	r0, #1
 8000668:	f002 fcf6 	bl	8003058 <xQueueGenericCreate>
 800066c:	4603      	mov	r3, r0
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <main+0x60>)
 8000670:	6013      	str	r3, [r2, #0]
  sensor_init();
 8000672:	f7ff ff55 	bl	8000520 <sensor_init>
  xTaskCreate(LED_Task,"LED_Task",128,NULL,1,NULL);
 8000676:	2300      	movs	r3, #0
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2301      	movs	r3, #1
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	490a      	ldr	r1, [pc, #40]	; (80006ac <main+0x64>)
 8000684:	480a      	ldr	r0, [pc, #40]	; (80006b0 <main+0x68>)
 8000686:	f003 fadd 	bl	8003c44 <xTaskCreate>
  xTaskCreate(vHandlerTask,"HandlerTask", 1000, NULL, 4, NULL);
 800068a:	2300      	movs	r3, #0
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2304      	movs	r3, #4
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2300      	movs	r3, #0
 8000694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000698:	4906      	ldr	r1, [pc, #24]	; (80006b4 <main+0x6c>)
 800069a:	4807      	ldr	r0, [pc, #28]	; (80006b8 <main+0x70>)
 800069c:	f003 fad2 	bl	8003c44 <xTaskCreate>
  vTaskStartScheduler();
 80006a0:	f003 fc42 	bl	8003f28 <vTaskStartScheduler>
  //Lab 3
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <main+0x5c>
 80006a6:	bf00      	nop
 80006a8:	200000c8 	.word	0x200000c8
 80006ac:	08005ac8 	.word	0x08005ac8
 80006b0:	08000579 	.word	0x08000579
 80006b4:	08005ad4 	.word	0x08005ad4
 80006b8:	08000599 	.word	0x08000599

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f005 f9e8 	bl	8005aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a27      	ldr	r2, [pc, #156]	; (8000788 <SystemClock_Config+0xcc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b25      	ldr	r3, [pc, #148]	; (8000788 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <SystemClock_Config+0xd0>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000730:	2332      	movs	r3, #50	; 0x32
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000734:	2304      	movs	r3, #4
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000738:	2307      	movs	r3, #7
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fea3 	bl	800148c <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800074c:	f000 f9f4 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f001 f904 	bl	800197c <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077a:	f000 f9dd 	bl	8000b38 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	; 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_SPI1_Init+0x64>)
 8000796:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <MX_SPI1_Init+0x68>)
 8000798:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_SPI1_Init+0x64>)
 800079c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_SPI1_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_SPI1_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_SPI1_Init+0x64>)
 80007bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_SPI1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_SPI1_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_SPI1_Init+0x64>)
 80007dc:	220a      	movs	r2, #10
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_SPI1_Init+0x64>)
 80007e2:	f001 fb1d 	bl	8001e20 <HAL_SPI_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007ec:	f000 f9a4 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000002c 	.word	0x2000002c
 80007f8:	40013000 	.word	0x40013000

080007fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000802:	4a12      	ldr	r2, [pc, #72]	; (800084c <MX_USART2_UART_Init+0x50>)
 8000804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_USART2_UART_Init+0x4c>)
 8000834:	f002 f832 	bl	800289c <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800083e:	f000 f97b 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000084 	.word	0x20000084
 800084c:	40004400 	.word	0x40004400

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
 800086a:	4ba4      	ldr	r3, [pc, #656]	; (8000afc <MX_GPIO_Init+0x2ac>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4aa3      	ldr	r2, [pc, #652]	; (8000afc <MX_GPIO_Init+0x2ac>)
 8000870:	f043 0310 	orr.w	r3, r3, #16
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4ba1      	ldr	r3, [pc, #644]	; (8000afc <MX_GPIO_Init+0x2ac>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0310 	and.w	r3, r3, #16
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	4b9d      	ldr	r3, [pc, #628]	; (8000afc <MX_GPIO_Init+0x2ac>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a9c      	ldr	r2, [pc, #624]	; (8000afc <MX_GPIO_Init+0x2ac>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b9a      	ldr	r3, [pc, #616]	; (8000afc <MX_GPIO_Init+0x2ac>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b96      	ldr	r3, [pc, #600]	; (8000afc <MX_GPIO_Init+0x2ac>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a95      	ldr	r2, [pc, #596]	; (8000afc <MX_GPIO_Init+0x2ac>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b93      	ldr	r3, [pc, #588]	; (8000afc <MX_GPIO_Init+0x2ac>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b8f      	ldr	r3, [pc, #572]	; (8000afc <MX_GPIO_Init+0x2ac>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a8e      	ldr	r2, [pc, #568]	; (8000afc <MX_GPIO_Init+0x2ac>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b8c      	ldr	r3, [pc, #560]	; (8000afc <MX_GPIO_Init+0x2ac>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	4b88      	ldr	r3, [pc, #544]	; (8000afc <MX_GPIO_Init+0x2ac>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a87      	ldr	r2, [pc, #540]	; (8000afc <MX_GPIO_Init+0x2ac>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b85      	ldr	r3, [pc, #532]	; (8000afc <MX_GPIO_Init+0x2ac>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b81      	ldr	r3, [pc, #516]	; (8000afc <MX_GPIO_Init+0x2ac>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a80      	ldr	r2, [pc, #512]	; (8000afc <MX_GPIO_Init+0x2ac>)
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b7e      	ldr	r3, [pc, #504]	; (8000afc <MX_GPIO_Init+0x2ac>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2108      	movs	r1, #8
 8000912:	487b      	ldr	r0, [pc, #492]	; (8000b00 <MX_GPIO_Init+0x2b0>)
 8000914:	f000 fd6e 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2101      	movs	r1, #1
 800091c:	4879      	ldr	r0, [pc, #484]	; (8000b04 <MX_GPIO_Init+0x2b4>)
 800091e:	f000 fd69 	bl	80013f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ledGreen_Pin|ledOrange_Pin|ledRed_Pin|ledBlue_Pin
 8000922:	2200      	movs	r2, #0
 8000924:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000928:	4877      	ldr	r0, [pc, #476]	; (8000b08 <MX_GPIO_Init+0x2b8>)
 800092a:	f000 fd63 	bl	80013f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800092e:	2308      	movs	r3, #8
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	486e      	ldr	r0, [pc, #440]	; (8000b00 <MX_GPIO_Init+0x2b0>)
 8000946:	f000 fbb9 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800094a:	2301      	movs	r3, #1
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4868      	ldr	r0, [pc, #416]	; (8000b04 <MX_GPIO_Init+0x2b4>)
 8000962:	f000 fbab 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000966:	2308      	movs	r3, #8
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000976:	2305      	movs	r3, #5
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4860      	ldr	r0, [pc, #384]	; (8000b04 <MX_GPIO_Init+0x2b4>)
 8000982:	f000 fb9b 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : buttonBlue_Pin */
  GPIO_InitStruct.Pin = buttonBlue_Pin;
 8000986:	2301      	movs	r3, #1
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(buttonBlue_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	485c      	ldr	r0, [pc, #368]	; (8000b0c <MX_GPIO_Init+0x2bc>)
 800099a:	f000 fb8f 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800099e:	2310      	movs	r3, #16
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ae:	2306      	movs	r3, #6
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4854      	ldr	r0, [pc, #336]	; (8000b0c <MX_GPIO_Init+0x2bc>)
 80009ba:	f000 fb7f 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009be:	2304      	movs	r3, #4
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	484f      	ldr	r0, [pc, #316]	; (8000b10 <MX_GPIO_Init+0x2c0>)
 80009d2:	f000 fb73 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e8:	2305      	movs	r3, #5
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4847      	ldr	r0, [pc, #284]	; (8000b10 <MX_GPIO_Init+0x2c0>)
 80009f4:	f000 fb62 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ledGreen_Pin ledOrange_Pin ledRed_Pin ledBlue_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = ledGreen_Pin|ledOrange_Pin|ledRed_Pin|ledBlue_Pin
 80009f8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009fc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	483d      	ldr	r0, [pc, #244]	; (8000b08 <MX_GPIO_Init+0x2b8>)
 8000a12:	f000 fb53 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a16:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a28:	2306      	movs	r3, #6
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4834      	ldr	r0, [pc, #208]	; (8000b04 <MX_GPIO_Init+0x2b4>)
 8000a34:	f000 fb42 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482f      	ldr	r0, [pc, #188]	; (8000b0c <MX_GPIO_Init+0x2bc>)
 8000a4e:	f000 fb35 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a52:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a64:	230a      	movs	r3, #10
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4827      	ldr	r0, [pc, #156]	; (8000b0c <MX_GPIO_Init+0x2bc>)
 8000a70:	f000 fb24 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a74:	2320      	movs	r3, #32
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4820      	ldr	r0, [pc, #128]	; (8000b08 <MX_GPIO_Init+0x2b8>)
 8000a88:	f000 fb18 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a8c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a92:	2312      	movs	r3, #18
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4819      	ldr	r0, [pc, #100]	; (8000b10 <MX_GPIO_Init+0x2c0>)
 8000aaa:	f000 fb07 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480f      	ldr	r0, [pc, #60]	; (8000b00 <MX_GPIO_Init+0x2b0>)
 8000ac4:	f000 fafa 	bl	80010bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000acc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4808      	ldr	r0, [pc, #32]	; (8000b00 <MX_GPIO_Init+0x2b0>)
 8000ade:	f000 faed 	bl	80010bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	2006      	movs	r0, #6
 8000ae8:	f000 fabe 	bl	8001068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000aec:	2006      	movs	r0, #6
 8000aee:	f000 fad7 	bl	80010a0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af2:	bf00      	nop
 8000af4:	3730      	adds	r7, #48	; 0x30
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40020800 	.word	0x40020800
 8000b08:	40020c00 	.word	0x40020c00
 8000b0c:	40020000 	.word	0x40020000
 8000b10:	40020400 	.word	0x40020400

08000b14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d101      	bne.n	8000b2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b26:	f000 f9c7 	bl	8000eb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40001400 	.word	0x40001400

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>
	...

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_SPI_MspInit+0x84>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12b      	bne.n	8000c0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_SPI_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bee:	23e0      	movs	r3, #224	; 0xe0
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bfe:	2305      	movs	r3, #5
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <HAL_SPI_MspInit+0x8c>)
 8000c0a:	f000 fa57 	bl	80010bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40013000 	.word	0x40013000
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_UART_MspInit+0x84>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12b      	bne.n	8000c9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c7e:	230c      	movs	r3, #12
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c8e:	2307      	movs	r3, #7
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_UART_MspInit+0x8c>)
 8000c9a:	f000 fa0f 	bl	80010bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40004400 	.word	0x40004400
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	; 0x38
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4b33      	ldr	r3, [pc, #204]	; (8000d98 <HAL_InitTick+0xe4>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	4a32      	ldr	r2, [pc, #200]	; (8000d98 <HAL_InitTick+0xe4>)
 8000cce:	f043 0320 	orr.w	r3, r3, #32
 8000cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd4:	4b30      	ldr	r3, [pc, #192]	; (8000d98 <HAL_InitTick+0xe4>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f003 0320 	and.w	r3, r3, #32
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ce0:	f107 0210 	add.w	r2, r7, #16
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 f866 	bl	8001dbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d103      	bne.n	8000d02 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cfa:	f001 f837 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 8000cfe:	6378      	str	r0, [r7, #52]	; 0x34
 8000d00:	e004      	b.n	8000d0c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d02:	f001 f833 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 8000d06:	4603      	mov	r3, r0
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d0e:	4a23      	ldr	r2, [pc, #140]	; (8000d9c <HAL_InitTick+0xe8>)
 8000d10:	fba2 2303 	umull	r2, r3, r2, r3
 8000d14:	0c9b      	lsrs	r3, r3, #18
 8000d16:	3b01      	subs	r3, #1
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <HAL_InitTick+0xec>)
 8000d1c:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <HAL_InitTick+0xf0>)
 8000d1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <HAL_InitTick+0xec>)
 8000d22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d26:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000d28:	4a1d      	ldr	r2, [pc, #116]	; (8000da0 <HAL_InitTick+0xec>)
 8000d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <HAL_InitTick+0xec>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <HAL_InitTick+0xec>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_InitTick+0xec>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000d40:	4817      	ldr	r0, [pc, #92]	; (8000da0 <HAL_InitTick+0xec>)
 8000d42:	f001 fafd 	bl	8002340 <HAL_TIM_Base_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d11b      	bne.n	8000d8c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000d54:	4812      	ldr	r0, [pc, #72]	; (8000da0 <HAL_InitTick+0xec>)
 8000d56:	f001 fb4d 	bl	80023f4 <HAL_TIM_Base_Start_IT>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d111      	bne.n	8000d8c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d68:	2037      	movs	r0, #55	; 0x37
 8000d6a:	f000 f999 	bl	80010a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d808      	bhi.n	8000d86 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	2037      	movs	r0, #55	; 0x37
 8000d7a:	f000 f975 	bl	8001068 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_InitTick+0xf4>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	e002      	b.n	8000d8c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3738      	adds	r7, #56	; 0x38
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	431bde83 	.word	0x431bde83
 8000da0:	200000cc 	.word	0x200000cc
 8000da4:	40001400 	.word	0x40001400
 8000da8:	20000004 	.word	0x20000004

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <MemManage_Handler+0x4>

08000dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f000 fb3d 	bl	800145c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <TIM7_IRQHandler+0x10>)
 8000dee:	f001 fb71 	bl	80024d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000cc 	.word	0x200000cc

08000dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <SystemInit+0x20>)
 8000e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <SystemInit+0x20>)
 8000e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480d      	ldr	r0, [pc, #52]	; (8000e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e26:	490e      	ldr	r1, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e28:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e3c:	4c0b      	ldr	r4, [pc, #44]	; (8000e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e4a:	f7ff ffd7 	bl	8000dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f004 fdf5 	bl	8005a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e52:	f7ff fbf9 	bl	8000648 <main>
  bx  lr    
 8000e56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e64:	08005bbc 	.word	0x08005bbc
  ldr r2, =_sbss
 8000e68:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e6c:	20012f80 	.word	0x20012f80

08000e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <HAL_Init+0x40>)
 8000e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_Init+0x40>)
 8000e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_Init+0x40>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f8d8 	bl	8001052 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff ff06 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff fe4c 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023c00 	.word	0x40023c00

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000114 	.word	0x20000114

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000114 	.word	0x20000114

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db0b      	blt.n	8000f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 021f 	and.w	r2, r3, #31
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <__NVIC_EnableIRQ+0x38>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ff4c 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107a:	f7ff ff61 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 800107e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	6978      	ldr	r0, [r7, #20]
 8001086:	f7ff ffb1 	bl	8000fec <NVIC_EncodePriority>
 800108a:	4602      	mov	r2, r0
 800108c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001090:	4611      	mov	r1, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff80 	bl	8000f98 <__NVIC_SetPriority>
}
 8001098:	bf00      	nop
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ff54 	bl	8000f5c <__NVIC_EnableIRQ>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	e16b      	b.n	80013b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	f040 815a 	bne.w	80013aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d005      	beq.n	800110e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	2b02      	cmp	r3, #2
 800110c:	d130      	bne.n	8001170 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 0201 	and.w	r2, r3, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b03      	cmp	r3, #3
 800117a:	d017      	beq.n	80011ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d123      	bne.n	8001200 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	08da      	lsrs	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3208      	adds	r2, #8
 80011fa:	69b9      	ldr	r1, [r7, #24]
 80011fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0203 	and.w	r2, r3, #3
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80b4 	beq.w	80013aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b60      	ldr	r3, [pc, #384]	; (80013c8 <HAL_GPIO_Init+0x30c>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a5f      	ldr	r2, [pc, #380]	; (80013c8 <HAL_GPIO_Init+0x30c>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b5d      	ldr	r3, [pc, #372]	; (80013c8 <HAL_GPIO_Init+0x30c>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125e:	4a5b      	ldr	r2, [pc, #364]	; (80013cc <HAL_GPIO_Init+0x310>)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a52      	ldr	r2, [pc, #328]	; (80013d0 <HAL_GPIO_Init+0x314>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d02b      	beq.n	80012e2 <HAL_GPIO_Init+0x226>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a51      	ldr	r2, [pc, #324]	; (80013d4 <HAL_GPIO_Init+0x318>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d025      	beq.n	80012de <HAL_GPIO_Init+0x222>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a50      	ldr	r2, [pc, #320]	; (80013d8 <HAL_GPIO_Init+0x31c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d01f      	beq.n	80012da <HAL_GPIO_Init+0x21e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4f      	ldr	r2, [pc, #316]	; (80013dc <HAL_GPIO_Init+0x320>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d019      	beq.n	80012d6 <HAL_GPIO_Init+0x21a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4e      	ldr	r2, [pc, #312]	; (80013e0 <HAL_GPIO_Init+0x324>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_GPIO_Init+0x216>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4d      	ldr	r2, [pc, #308]	; (80013e4 <HAL_GPIO_Init+0x328>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d00d      	beq.n	80012ce <HAL_GPIO_Init+0x212>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4c      	ldr	r2, [pc, #304]	; (80013e8 <HAL_GPIO_Init+0x32c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d007      	beq.n	80012ca <HAL_GPIO_Init+0x20e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4b      	ldr	r2, [pc, #300]	; (80013ec <HAL_GPIO_Init+0x330>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d101      	bne.n	80012c6 <HAL_GPIO_Init+0x20a>
 80012c2:	2307      	movs	r3, #7
 80012c4:	e00e      	b.n	80012e4 <HAL_GPIO_Init+0x228>
 80012c6:	2308      	movs	r3, #8
 80012c8:	e00c      	b.n	80012e4 <HAL_GPIO_Init+0x228>
 80012ca:	2306      	movs	r3, #6
 80012cc:	e00a      	b.n	80012e4 <HAL_GPIO_Init+0x228>
 80012ce:	2305      	movs	r3, #5
 80012d0:	e008      	b.n	80012e4 <HAL_GPIO_Init+0x228>
 80012d2:	2304      	movs	r3, #4
 80012d4:	e006      	b.n	80012e4 <HAL_GPIO_Init+0x228>
 80012d6:	2303      	movs	r3, #3
 80012d8:	e004      	b.n	80012e4 <HAL_GPIO_Init+0x228>
 80012da:	2302      	movs	r3, #2
 80012dc:	e002      	b.n	80012e4 <HAL_GPIO_Init+0x228>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_GPIO_Init+0x228>
 80012e2:	2300      	movs	r3, #0
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	f002 0203 	and.w	r2, r2, #3
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	4093      	lsls	r3, r2
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f4:	4935      	ldr	r1, [pc, #212]	; (80013cc <HAL_GPIO_Init+0x310>)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001302:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <HAL_GPIO_Init+0x334>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001326:	4a32      	ldr	r2, [pc, #200]	; (80013f0 <HAL_GPIO_Init+0x334>)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800132c:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <HAL_GPIO_Init+0x334>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001350:	4a27      	ldr	r2, [pc, #156]	; (80013f0 <HAL_GPIO_Init+0x334>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <HAL_GPIO_Init+0x334>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800137a:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <HAL_GPIO_Init+0x334>)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_GPIO_Init+0x334>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <HAL_GPIO_Init+0x334>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3301      	adds	r3, #1
 80013ae:	61fb      	str	r3, [r7, #28]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	2b0f      	cmp	r3, #15
 80013b4:	f67f ae90 	bls.w	80010d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3724      	adds	r7, #36	; 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40013800 	.word	0x40013800
 80013d0:	40020000 	.word	0x40020000
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020c00 	.word	0x40020c00
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40021400 	.word	0x40021400
 80013e8:	40021800 	.word	0x40021800
 80013ec:	40021c00 	.word	0x40021c00
 80013f0:	40013c00 	.word	0x40013c00

080013f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
 8001400:	4613      	mov	r3, r2
 8001402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001404:	787b      	ldrb	r3, [r7, #1]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001410:	e003      	b.n	800141a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001412:	887b      	ldrh	r3, [r7, #2]
 8001414:	041a      	lsls	r2, r3, #16
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	619a      	str	r2, [r3, #24]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001426:	b480      	push	{r7}
 8001428:	b085      	sub	sp, #20
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	460b      	mov	r3, r1
 8001430:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001438:	887a      	ldrh	r2, [r7, #2]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4013      	ands	r3, r2
 800143e:	041a      	lsls	r2, r3, #16
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43d9      	mvns	r1, r3
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	400b      	ands	r3, r1
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	619a      	str	r2, [r3, #24]
}
 800144e:	bf00      	nop
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001468:	695a      	ldr	r2, [r3, #20]
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	4013      	ands	r3, r2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d006      	beq.n	8001480 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f8ba 	bl	80005f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40013c00 	.word	0x40013c00

0800148c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e267      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d075      	beq.n	8001596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014aa:	4b88      	ldr	r3, [pc, #544]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d00c      	beq.n	80014d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014b6:	4b85      	ldr	r3, [pc, #532]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d112      	bne.n	80014e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014c2:	4b82      	ldr	r3, [pc, #520]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014ce:	d10b      	bne.n	80014e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d0:	4b7e      	ldr	r3, [pc, #504]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d05b      	beq.n	8001594 <HAL_RCC_OscConfig+0x108>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d157      	bne.n	8001594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e242      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f0:	d106      	bne.n	8001500 <HAL_RCC_OscConfig+0x74>
 80014f2:	4b76      	ldr	r3, [pc, #472]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a75      	ldr	r2, [pc, #468]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 80014f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e01d      	b.n	800153c <HAL_RCC_OscConfig+0xb0>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0x98>
 800150a:	4b70      	ldr	r3, [pc, #448]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a6f      	ldr	r2, [pc, #444]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 8001510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b6d      	ldr	r3, [pc, #436]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a6c      	ldr	r2, [pc, #432]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e00b      	b.n	800153c <HAL_RCC_OscConfig+0xb0>
 8001524:	4b69      	ldr	r3, [pc, #420]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a68      	ldr	r2, [pc, #416]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 800152a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b66      	ldr	r3, [pc, #408]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a65      	ldr	r2, [pc, #404]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 8001536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d013      	beq.n	800156c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fccc 	bl	8000ee0 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fcc8 	bl	8000ee0 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e207      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	4b5b      	ldr	r3, [pc, #364]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0xc0>
 800156a:	e014      	b.n	8001596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fcb8 	bl	8000ee0 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fcb4 	bl	8000ee0 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e1f3      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001586:	4b51      	ldr	r3, [pc, #324]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0xe8>
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d063      	beq.n	800166a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015a2:	4b4a      	ldr	r3, [pc, #296]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00b      	beq.n	80015c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ae:	4b47      	ldr	r3, [pc, #284]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d11c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ba:	4b44      	ldr	r3, [pc, #272]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d116      	bne.n	80015f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	4b41      	ldr	r3, [pc, #260]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <HAL_RCC_OscConfig+0x152>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d001      	beq.n	80015de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e1c7      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4937      	ldr	r1, [pc, #220]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f2:	e03a      	b.n	800166a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fc:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_RCC_OscConfig+0x244>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001602:	f7ff fc6d 	bl	8000ee0 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800160a:	f7ff fc69 	bl	8000ee0 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e1a8      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161c:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001628:	4b28      	ldr	r3, [pc, #160]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4925      	ldr	r1, [pc, #148]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
 800163c:	e015      	b.n	800166a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <HAL_RCC_OscConfig+0x244>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001644:	f7ff fc4c 	bl	8000ee0 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164c:	f7ff fc48 	bl	8000ee0 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e187      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d036      	beq.n	80016e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d016      	beq.n	80016ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_RCC_OscConfig+0x248>)
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001684:	f7ff fc2c 	bl	8000ee0 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800168c:	f7ff fc28 	bl	8000ee0 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e167      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCC_OscConfig+0x240>)
 80016a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x200>
 80016aa:	e01b      	b.n	80016e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_RCC_OscConfig+0x248>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b2:	f7ff fc15 	bl	8000ee0 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b8:	e00e      	b.n	80016d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ba:	f7ff fc11 	bl	8000ee0 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d907      	bls.n	80016d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e150      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
 80016cc:	40023800 	.word	0x40023800
 80016d0:	42470000 	.word	0x42470000
 80016d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d8:	4b88      	ldr	r3, [pc, #544]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 80016da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1ea      	bne.n	80016ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 8097 	beq.w	8001820 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f6:	4b81      	ldr	r3, [pc, #516]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10f      	bne.n	8001722 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	4b7d      	ldr	r3, [pc, #500]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a7c      	ldr	r2, [pc, #496]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b7a      	ldr	r3, [pc, #488]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171e:	2301      	movs	r3, #1
 8001720:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001722:	4b77      	ldr	r3, [pc, #476]	; (8001900 <HAL_RCC_OscConfig+0x474>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d118      	bne.n	8001760 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172e:	4b74      	ldr	r3, [pc, #464]	; (8001900 <HAL_RCC_OscConfig+0x474>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a73      	ldr	r2, [pc, #460]	; (8001900 <HAL_RCC_OscConfig+0x474>)
 8001734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173a:	f7ff fbd1 	bl	8000ee0 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001742:	f7ff fbcd 	bl	8000ee0 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e10c      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001754:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <HAL_RCC_OscConfig+0x474>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d106      	bne.n	8001776 <HAL_RCC_OscConfig+0x2ea>
 8001768:	4b64      	ldr	r3, [pc, #400]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 800176a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176c:	4a63      	ldr	r2, [pc, #396]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6713      	str	r3, [r2, #112]	; 0x70
 8001774:	e01c      	b.n	80017b0 <HAL_RCC_OscConfig+0x324>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b05      	cmp	r3, #5
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0x30c>
 800177e:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	4a5e      	ldr	r2, [pc, #376]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	6713      	str	r3, [r2, #112]	; 0x70
 800178a:	4b5c      	ldr	r3, [pc, #368]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178e:	4a5b      	ldr	r2, [pc, #364]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6713      	str	r3, [r2, #112]	; 0x70
 8001796:	e00b      	b.n	80017b0 <HAL_RCC_OscConfig+0x324>
 8001798:	4b58      	ldr	r3, [pc, #352]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179c:	4a57      	ldr	r2, [pc, #348]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 800179e:	f023 0301 	bic.w	r3, r3, #1
 80017a2:	6713      	str	r3, [r2, #112]	; 0x70
 80017a4:	4b55      	ldr	r3, [pc, #340]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a8:	4a54      	ldr	r2, [pc, #336]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 80017aa:	f023 0304 	bic.w	r3, r3, #4
 80017ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d015      	beq.n	80017e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b8:	f7ff fb92 	bl	8000ee0 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017be:	e00a      	b.n	80017d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c0:	f7ff fb8e 	bl	8000ee0 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e0cb      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d6:	4b49      	ldr	r3, [pc, #292]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 80017d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0ee      	beq.n	80017c0 <HAL_RCC_OscConfig+0x334>
 80017e2:	e014      	b.n	800180e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e4:	f7ff fb7c 	bl	8000ee0 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ec:	f7ff fb78 	bl	8000ee0 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e0b5      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001802:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 8001804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1ee      	bne.n	80017ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800180e:	7dfb      	ldrb	r3, [r7, #23]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d105      	bne.n	8001820 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001814:	4b39      	ldr	r3, [pc, #228]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	4a38      	ldr	r2, [pc, #224]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 800181a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800181e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 80a1 	beq.w	800196c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800182a:	4b34      	ldr	r3, [pc, #208]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b08      	cmp	r3, #8
 8001834:	d05c      	beq.n	80018f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d141      	bne.n	80018c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183e:	4b31      	ldr	r3, [pc, #196]	; (8001904 <HAL_RCC_OscConfig+0x478>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7ff fb4c 	bl	8000ee0 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184c:	f7ff fb48 	bl	8000ee0 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e087      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	4b27      	ldr	r3, [pc, #156]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69da      	ldr	r2, [r3, #28]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	019b      	lsls	r3, r3, #6
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	085b      	lsrs	r3, r3, #1
 8001882:	3b01      	subs	r3, #1
 8001884:	041b      	lsls	r3, r3, #16
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	061b      	lsls	r3, r3, #24
 800188e:	491b      	ldr	r1, [pc, #108]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_RCC_OscConfig+0x478>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189a:	f7ff fb21 	bl	8000ee0 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a2:	f7ff fb1d 	bl	8000ee0 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e05c      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x416>
 80018c0:	e054      	b.n	800196c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_RCC_OscConfig+0x478>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fb0a 	bl	8000ee0 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff fb06 	bl	8000ee0 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e045      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_RCC_OscConfig+0x470>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x444>
 80018ee:	e03d      	b.n	800196c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e038      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
 80018fc:	40023800 	.word	0x40023800
 8001900:	40007000 	.word	0x40007000
 8001904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_RCC_OscConfig+0x4ec>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d028      	beq.n	8001968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d121      	bne.n	8001968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d11a      	bne.n	8001968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001938:	4013      	ands	r3, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800193e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001940:	4293      	cmp	r3, r2
 8001942:	d111      	bne.n	8001968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	085b      	lsrs	r3, r3, #1
 8001950:	3b01      	subs	r3, #1
 8001952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d107      	bne.n	8001968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800

0800197c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0cc      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001990:	4b68      	ldr	r3, [pc, #416]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d90c      	bls.n	80019b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b65      	ldr	r3, [pc, #404]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b63      	ldr	r3, [pc, #396]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0b8      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d0:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4a58      	ldr	r2, [pc, #352]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e8:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4a52      	ldr	r2, [pc, #328]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f4:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	494d      	ldr	r1, [pc, #308]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d044      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d107      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d119      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e07f      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d003      	beq.n	8001a3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d109      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e06f      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e067      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a5a:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f023 0203 	bic.w	r2, r3, #3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4934      	ldr	r1, [pc, #208]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a6c:	f7ff fa38 	bl	8000ee0 <HAL_GetTick>
 8001a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	e00a      	b.n	8001a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a74:	f7ff fa34 	bl	8000ee0 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e04f      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 020c 	and.w	r2, r3, #12
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d1eb      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d20c      	bcs.n	8001ac4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e032      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4916      	ldr	r1, [pc, #88]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d009      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	490e      	ldr	r1, [pc, #56]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b02:	f000 f821 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8001b06:	4602      	mov	r2, r0
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	490a      	ldr	r1, [pc, #40]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 8001b14:	5ccb      	ldrb	r3, [r1, r3]
 8001b16:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1a:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f8c6 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023c00 	.word	0x40023c00
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	08005b94 	.word	0x08005b94
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000004 	.word	0x20000004

08001b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b4c:	b094      	sub	sp, #80	; 0x50
 8001b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	647b      	str	r3, [r7, #68]	; 0x44
 8001b54:	2300      	movs	r3, #0
 8001b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b58:	2300      	movs	r3, #0
 8001b5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b60:	4b79      	ldr	r3, [pc, #484]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d00d      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x40>
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	f200 80e1 	bhi.w	8001d34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x34>
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d003      	beq.n	8001b82 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b7a:	e0db      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b7c:	4b73      	ldr	r3, [pc, #460]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b80:	e0db      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b82:	4b73      	ldr	r3, [pc, #460]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b86:	e0d8      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b88:	4b6f      	ldr	r3, [pc, #444]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b92:	4b6d      	ldr	r3, [pc, #436]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d063      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b9e:	4b6a      	ldr	r3, [pc, #424]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	099b      	lsrs	r3, r3, #6
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ba8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8001bb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bba:	4622      	mov	r2, r4
 8001bbc:	462b      	mov	r3, r5
 8001bbe:	f04f 0000 	mov.w	r0, #0
 8001bc2:	f04f 0100 	mov.w	r1, #0
 8001bc6:	0159      	lsls	r1, r3, #5
 8001bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bcc:	0150      	lsls	r0, r2, #5
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	1a51      	subs	r1, r2, r1
 8001bd6:	6139      	str	r1, [r7, #16]
 8001bd8:	4629      	mov	r1, r5
 8001bda:	eb63 0301 	sbc.w	r3, r3, r1
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bec:	4659      	mov	r1, fp
 8001bee:	018b      	lsls	r3, r1, #6
 8001bf0:	4651      	mov	r1, sl
 8001bf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bf6:	4651      	mov	r1, sl
 8001bf8:	018a      	lsls	r2, r1, #6
 8001bfa:	4651      	mov	r1, sl
 8001bfc:	ebb2 0801 	subs.w	r8, r2, r1
 8001c00:	4659      	mov	r1, fp
 8001c02:	eb63 0901 	sbc.w	r9, r3, r1
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c1a:	4690      	mov	r8, r2
 8001c1c:	4699      	mov	r9, r3
 8001c1e:	4623      	mov	r3, r4
 8001c20:	eb18 0303 	adds.w	r3, r8, r3
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	462b      	mov	r3, r5
 8001c28:	eb49 0303 	adc.w	r3, r9, r3
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	024b      	lsls	r3, r1, #9
 8001c3e:	4621      	mov	r1, r4
 8001c40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c44:	4621      	mov	r1, r4
 8001c46:	024a      	lsls	r2, r1, #9
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c4e:	2200      	movs	r2, #0
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c58:	f7fe faba 	bl	80001d0 <__aeabi_uldivmod>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4613      	mov	r3, r2
 8001c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c64:	e058      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c66:	4b38      	ldr	r3, [pc, #224]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	099b      	lsrs	r3, r3, #6
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	4611      	mov	r1, r2
 8001c72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c76:	623b      	str	r3, [r7, #32]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c80:	4642      	mov	r2, r8
 8001c82:	464b      	mov	r3, r9
 8001c84:	f04f 0000 	mov.w	r0, #0
 8001c88:	f04f 0100 	mov.w	r1, #0
 8001c8c:	0159      	lsls	r1, r3, #5
 8001c8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c92:	0150      	lsls	r0, r2, #5
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4641      	mov	r1, r8
 8001c9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c9e:	4649      	mov	r1, r9
 8001ca0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cb8:	ebb2 040a 	subs.w	r4, r2, sl
 8001cbc:	eb63 050b 	sbc.w	r5, r3, fp
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	00eb      	lsls	r3, r5, #3
 8001cca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cce:	00e2      	lsls	r2, r4, #3
 8001cd0:	4614      	mov	r4, r2
 8001cd2:	461d      	mov	r5, r3
 8001cd4:	4643      	mov	r3, r8
 8001cd6:	18e3      	adds	r3, r4, r3
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	464b      	mov	r3, r9
 8001cdc:	eb45 0303 	adc.w	r3, r5, r3
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cee:	4629      	mov	r1, r5
 8001cf0:	028b      	lsls	r3, r1, #10
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	028a      	lsls	r2, r1, #10
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d02:	2200      	movs	r2, #0
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	61fa      	str	r2, [r7, #28]
 8001d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d0c:	f7fe fa60 	bl	80001d0 <__aeabi_uldivmod>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4613      	mov	r3, r2
 8001d16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	0c1b      	lsrs	r3, r3, #16
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	3301      	adds	r3, #1
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d32:	e002      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3750      	adds	r7, #80	; 0x50
 8001d40:	46bd      	mov	sp, r7
 8001d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	00f42400 	.word	0x00f42400
 8001d50:	007a1200 	.word	0x007a1200

08001d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000000 	.word	0x20000000

08001d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d70:	f7ff fff0 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	0a9b      	lsrs	r3, r3, #10
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4903      	ldr	r1, [pc, #12]	; (8001d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	08005ba4 	.word	0x08005ba4

08001d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d98:	f7ff ffdc 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	0b5b      	lsrs	r3, r3, #13
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	4903      	ldr	r1, [pc, #12]	; (8001db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001daa:	5ccb      	ldrb	r3, [r1, r3]
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40023800 	.word	0x40023800
 8001db8:	08005ba4 	.word	0x08005ba4

08001dbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	220f      	movs	r2, #15
 8001dca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_RCC_GetClockConfig+0x5c>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0203 	and.w	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <HAL_RCC_GetClockConfig+0x5c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <HAL_RCC_GetClockConfig+0x5c>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_GetClockConfig+0x5c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	08db      	lsrs	r3, r3, #3
 8001df6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_RCC_GetClockConfig+0x60>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0207 	and.w	r2, r3, #7
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	601a      	str	r2, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e07b      	b.n	8001f2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d108      	bne.n	8001e4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e42:	d009      	beq.n	8001e58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
 8001e4a:	e005      	b.n	8001e58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe fe8e 	bl	8000b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001edc:	ea42 0103 	orr.w	r1, r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	0c1b      	lsrs	r3, r3, #16
 8001ef6:	f003 0104 	and.w	r1, r3, #4
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	f003 0210 	and.w	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	69da      	ldr	r2, [r3, #28]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b088      	sub	sp, #32
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_SPI_Transmit+0x22>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e126      	b.n	80021a2 <HAL_SPI_Transmit+0x270>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f5c:	f7fe ffc0 	bl	8000ee0 <HAL_GetTick>
 8001f60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d002      	beq.n	8001f78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f72:	2302      	movs	r3, #2
 8001f74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f76:	e10b      	b.n	8002190 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <HAL_SPI_Transmit+0x52>
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f88:	e102      	b.n	8002190 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	88fa      	ldrh	r2, [r7, #6]
 8001fa2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	88fa      	ldrh	r2, [r7, #6]
 8001fa8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fd0:	d10f      	bne.n	8001ff2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fe0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ff0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffc:	2b40      	cmp	r3, #64	; 0x40
 8001ffe:	d007      	beq.n	8002010 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800200e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002018:	d14b      	bne.n	80020b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <HAL_SPI_Transmit+0xf6>
 8002022:	8afb      	ldrh	r3, [r7, #22]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d13e      	bne.n	80020a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	881a      	ldrh	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	1c9a      	adds	r2, r3, #2
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002042:	b29b      	uxth	r3, r3
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800204c:	e02b      	b.n	80020a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b02      	cmp	r3, #2
 800205a:	d112      	bne.n	8002082 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	881a      	ldrh	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	1c9a      	adds	r2, r3, #2
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002076:	b29b      	uxth	r3, r3
 8002078:	3b01      	subs	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002080:	e011      	b.n	80020a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002082:	f7fe ff2d 	bl	8000ee0 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d803      	bhi.n	800209a <HAL_SPI_Transmit+0x168>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d102      	bne.n	80020a0 <HAL_SPI_Transmit+0x16e>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020a4:	e074      	b.n	8002190 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1ce      	bne.n	800204e <HAL_SPI_Transmit+0x11c>
 80020b0:	e04c      	b.n	800214c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <HAL_SPI_Transmit+0x18e>
 80020ba:	8afb      	ldrh	r3, [r7, #22]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d140      	bne.n	8002142 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	330c      	adds	r3, #12
 80020ca:	7812      	ldrb	r2, [r2, #0]
 80020cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020e6:	e02c      	b.n	8002142 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d113      	bne.n	800211e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	330c      	adds	r3, #12
 8002100:	7812      	ldrb	r2, [r2, #0]
 8002102:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	86da      	strh	r2, [r3, #54]	; 0x36
 800211c:	e011      	b.n	8002142 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800211e:	f7fe fedf 	bl	8000ee0 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d803      	bhi.n	8002136 <HAL_SPI_Transmit+0x204>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d102      	bne.n	800213c <HAL_SPI_Transmit+0x20a>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002140:	e026      	b.n	8002190 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002146:	b29b      	uxth	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1cd      	bne.n	80020e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	6839      	ldr	r1, [r7, #0]
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 f8b3 	bl	80022bc <SPI_EndRxTxTransaction>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2220      	movs	r2, #32
 8002160:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10a      	bne.n	8002180 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	77fb      	strb	r3, [r7, #31]
 800218c:	e000      	b.n	8002190 <HAL_SPI_Transmit+0x25e>
  }

error:
 800218e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3720      	adds	r7, #32
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	4613      	mov	r3, r2
 80021ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80021bc:	f7fe fe90 	bl	8000ee0 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	4413      	add	r3, r2
 80021ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80021cc:	f7fe fe88 	bl	8000ee0 <HAL_GetTick>
 80021d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80021d2:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	015b      	lsls	r3, r3, #5
 80021d8:	0d1b      	lsrs	r3, r3, #20
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	fb02 f303 	mul.w	r3, r2, r3
 80021e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021e2:	e054      	b.n	800228e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ea:	d050      	beq.n	800228e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021ec:	f7fe fe78 	bl	8000ee0 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d902      	bls.n	8002202 <SPI_WaitFlagStateUntilTimeout+0x56>
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d13d      	bne.n	800227e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002210:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800221a:	d111      	bne.n	8002240 <SPI_WaitFlagStateUntilTimeout+0x94>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002224:	d004      	beq.n	8002230 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222e:	d107      	bne.n	8002240 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800223e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002248:	d10f      	bne.n	800226a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002268:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e017      	b.n	80022ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3b01      	subs	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4013      	ands	r3, r2
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	429a      	cmp	r2, r3
 800229c:	bf0c      	ite	eq
 800229e:	2301      	moveq	r3, #1
 80022a0:	2300      	movne	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d19b      	bne.n	80021e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000000 	.word	0x20000000

080022bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80022c8:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <SPI_EndRxTxTransaction+0x7c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1b      	ldr	r2, [pc, #108]	; (800233c <SPI_EndRxTxTransaction+0x80>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0d5b      	lsrs	r3, r3, #21
 80022d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022e6:	d112      	bne.n	800230e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2200      	movs	r2, #0
 80022f0:	2180      	movs	r1, #128	; 0x80
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7ff ff5a 	bl	80021ac <SPI_WaitFlagStateUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d016      	beq.n	800232c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	f043 0220 	orr.w	r2, r3, #32
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e00f      	b.n	800232e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3b01      	subs	r3, #1
 8002318:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d0f2      	beq.n	800230e <SPI_EndRxTxTransaction+0x52>
 8002328:	e000      	b.n	800232c <SPI_EndRxTxTransaction+0x70>
        break;
 800232a:	bf00      	nop
  }

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000000 	.word	0x20000000
 800233c:	165e9f81 	.word	0x165e9f81

08002340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e041      	b.n	80023d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f839 	bl	80023de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3304      	adds	r3, #4
 800237c:	4619      	mov	r1, r3
 800237e:	4610      	mov	r0, r2
 8002380:	f000 f9d8 	bl	8002734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b01      	cmp	r3, #1
 8002406:	d001      	beq.n	800240c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e04e      	b.n	80024aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d022      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x80>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002436:	d01d      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x80>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1f      	ldr	r2, [pc, #124]	; (80024bc <HAL_TIM_Base_Start_IT+0xc8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d018      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x80>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1e      	ldr	r2, [pc, #120]	; (80024c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d013      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x80>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00e      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x80>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a1b      	ldr	r2, [pc, #108]	; (80024c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d009      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x80>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a19      	ldr	r2, [pc, #100]	; (80024cc <HAL_TIM_Base_Start_IT+0xd8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d004      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x80>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a18      	ldr	r2, [pc, #96]	; (80024d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d111      	bne.n	8002498 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b06      	cmp	r3, #6
 8002484:	d010      	beq.n	80024a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002496:	e007      	b.n	80024a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40010000 	.word	0x40010000
 80024bc:	40000400 	.word	0x40000400
 80024c0:	40000800 	.word	0x40000800
 80024c4:	40000c00 	.word	0x40000c00
 80024c8:	40010400 	.word	0x40010400
 80024cc:	40014000 	.word	0x40014000
 80024d0:	40001800 	.word	0x40001800

080024d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d122      	bne.n	8002530 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d11b      	bne.n	8002530 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0202 	mvn.w	r2, #2
 8002500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f8ee 	bl	80026f8 <HAL_TIM_IC_CaptureCallback>
 800251c:	e005      	b.n	800252a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f8e0 	bl	80026e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f8f1 	bl	800270c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b04      	cmp	r3, #4
 800253c:	d122      	bne.n	8002584 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b04      	cmp	r3, #4
 800254a:	d11b      	bne.n	8002584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0204 	mvn.w	r2, #4
 8002554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2202      	movs	r2, #2
 800255a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f8c4 	bl	80026f8 <HAL_TIM_IC_CaptureCallback>
 8002570:	e005      	b.n	800257e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f8b6 	bl	80026e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f8c7 	bl	800270c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b08      	cmp	r3, #8
 8002590:	d122      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b08      	cmp	r3, #8
 800259e:	d11b      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0208 	mvn.w	r2, #8
 80025a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2204      	movs	r2, #4
 80025ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f89a 	bl	80026f8 <HAL_TIM_IC_CaptureCallback>
 80025c4:	e005      	b.n	80025d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f88c 	bl	80026e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f89d 	bl	800270c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b10      	cmp	r3, #16
 80025e4:	d122      	bne.n	800262c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	2b10      	cmp	r3, #16
 80025f2:	d11b      	bne.n	800262c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0210 	mvn.w	r2, #16
 80025fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2208      	movs	r2, #8
 8002602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f870 	bl	80026f8 <HAL_TIM_IC_CaptureCallback>
 8002618:	e005      	b.n	8002626 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f862 	bl	80026e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f873 	bl	800270c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b01      	cmp	r3, #1
 8002638:	d10e      	bne.n	8002658 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b01      	cmp	r3, #1
 8002646:	d107      	bne.n	8002658 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0201 	mvn.w	r2, #1
 8002650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe fa5e 	bl	8000b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002662:	2b80      	cmp	r3, #128	; 0x80
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002670:	2b80      	cmp	r3, #128	; 0x80
 8002672:	d107      	bne.n	8002684 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800267c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f902 	bl	8002888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268e:	2b40      	cmp	r3, #64	; 0x40
 8002690:	d10e      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d107      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f838 	bl	8002720 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d10e      	bne.n	80026dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d107      	bne.n	80026dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0220 	mvn.w	r2, #32
 80026d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f8cc 	bl	8002874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a40      	ldr	r2, [pc, #256]	; (8002848 <TIM_Base_SetConfig+0x114>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d013      	beq.n	8002774 <TIM_Base_SetConfig+0x40>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002752:	d00f      	beq.n	8002774 <TIM_Base_SetConfig+0x40>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a3d      	ldr	r2, [pc, #244]	; (800284c <TIM_Base_SetConfig+0x118>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d00b      	beq.n	8002774 <TIM_Base_SetConfig+0x40>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a3c      	ldr	r2, [pc, #240]	; (8002850 <TIM_Base_SetConfig+0x11c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d007      	beq.n	8002774 <TIM_Base_SetConfig+0x40>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3b      	ldr	r2, [pc, #236]	; (8002854 <TIM_Base_SetConfig+0x120>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d003      	beq.n	8002774 <TIM_Base_SetConfig+0x40>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3a      	ldr	r2, [pc, #232]	; (8002858 <TIM_Base_SetConfig+0x124>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d108      	bne.n	8002786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a2f      	ldr	r2, [pc, #188]	; (8002848 <TIM_Base_SetConfig+0x114>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d02b      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002794:	d027      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a2c      	ldr	r2, [pc, #176]	; (800284c <TIM_Base_SetConfig+0x118>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d023      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a2b      	ldr	r2, [pc, #172]	; (8002850 <TIM_Base_SetConfig+0x11c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d01f      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a2a      	ldr	r2, [pc, #168]	; (8002854 <TIM_Base_SetConfig+0x120>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d01b      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a29      	ldr	r2, [pc, #164]	; (8002858 <TIM_Base_SetConfig+0x124>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d017      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a28      	ldr	r2, [pc, #160]	; (800285c <TIM_Base_SetConfig+0x128>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a27      	ldr	r2, [pc, #156]	; (8002860 <TIM_Base_SetConfig+0x12c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00f      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a26      	ldr	r2, [pc, #152]	; (8002864 <TIM_Base_SetConfig+0x130>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00b      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a25      	ldr	r2, [pc, #148]	; (8002868 <TIM_Base_SetConfig+0x134>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a24      	ldr	r2, [pc, #144]	; (800286c <TIM_Base_SetConfig+0x138>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d003      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a23      	ldr	r2, [pc, #140]	; (8002870 <TIM_Base_SetConfig+0x13c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d108      	bne.n	80027f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <TIM_Base_SetConfig+0x114>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d003      	beq.n	800282c <TIM_Base_SetConfig+0xf8>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a0c      	ldr	r2, [pc, #48]	; (8002858 <TIM_Base_SetConfig+0x124>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d103      	bne.n	8002834 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	615a      	str	r2, [r3, #20]
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40010000 	.word	0x40010000
 800284c:	40000400 	.word	0x40000400
 8002850:	40000800 	.word	0x40000800
 8002854:	40000c00 	.word	0x40000c00
 8002858:	40010400 	.word	0x40010400
 800285c:	40014000 	.word	0x40014000
 8002860:	40014400 	.word	0x40014400
 8002864:	40014800 	.word	0x40014800
 8002868:	40001800 	.word	0x40001800
 800286c:	40001c00 	.word	0x40001c00
 8002870:	40002000 	.word	0x40002000

08002874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e03f      	b.n	800292e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe f9ae 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	; 0x24
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f829 	bl	8002938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800293c:	b0c0      	sub	sp, #256	; 0x100
 800293e:	af00      	add	r7, sp, #0
 8002940:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002954:	68d9      	ldr	r1, [r3, #12]
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	ea40 0301 	orr.w	r3, r0, r1
 8002960:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	431a      	orrs	r2, r3
 8002970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	431a      	orrs	r2, r3
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002990:	f021 010c 	bic.w	r1, r1, #12
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800299e:	430b      	orrs	r3, r1
 80029a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b2:	6999      	ldr	r1, [r3, #24]
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	ea40 0301 	orr.w	r3, r0, r1
 80029be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4b8f      	ldr	r3, [pc, #572]	; (8002c04 <UART_SetConfig+0x2cc>)
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d005      	beq.n	80029d8 <UART_SetConfig+0xa0>
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4b8d      	ldr	r3, [pc, #564]	; (8002c08 <UART_SetConfig+0x2d0>)
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d104      	bne.n	80029e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029d8:	f7ff f9dc 	bl	8001d94 <HAL_RCC_GetPCLK2Freq>
 80029dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029e0:	e003      	b.n	80029ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029e2:	f7ff f9c3 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 80029e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029f4:	f040 810c 	bne.w	8002c10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029fc:	2200      	movs	r2, #0
 80029fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a0a:	4622      	mov	r2, r4
 8002a0c:	462b      	mov	r3, r5
 8002a0e:	1891      	adds	r1, r2, r2
 8002a10:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a12:	415b      	adcs	r3, r3
 8002a14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	eb12 0801 	adds.w	r8, r2, r1
 8002a20:	4629      	mov	r1, r5
 8002a22:	eb43 0901 	adc.w	r9, r3, r1
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a3a:	4690      	mov	r8, r2
 8002a3c:	4699      	mov	r9, r3
 8002a3e:	4623      	mov	r3, r4
 8002a40:	eb18 0303 	adds.w	r3, r8, r3
 8002a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a48:	462b      	mov	r3, r5
 8002a4a:	eb49 0303 	adc.w	r3, r9, r3
 8002a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a66:	460b      	mov	r3, r1
 8002a68:	18db      	adds	r3, r3, r3
 8002a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	eb42 0303 	adc.w	r3, r2, r3
 8002a72:	657b      	str	r3, [r7, #84]	; 0x54
 8002a74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a7c:	f7fd fba8 	bl	80001d0 <__aeabi_uldivmod>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4b61      	ldr	r3, [pc, #388]	; (8002c0c <UART_SetConfig+0x2d4>)
 8002a86:	fba3 2302 	umull	r2, r3, r3, r2
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	011c      	lsls	r4, r3, #4
 8002a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a92:	2200      	movs	r2, #0
 8002a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	464b      	mov	r3, r9
 8002aa4:	1891      	adds	r1, r2, r2
 8002aa6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002aa8:	415b      	adcs	r3, r3
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ab0:	4641      	mov	r1, r8
 8002ab2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ab6:	4649      	mov	r1, r9
 8002ab8:	eb43 0b01 	adc.w	fp, r3, r1
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ac8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002acc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ad0:	4692      	mov	sl, r2
 8002ad2:	469b      	mov	fp, r3
 8002ad4:	4643      	mov	r3, r8
 8002ad6:	eb1a 0303 	adds.w	r3, sl, r3
 8002ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ade:	464b      	mov	r3, r9
 8002ae0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ae4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002af4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002af8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002afc:	460b      	mov	r3, r1
 8002afe:	18db      	adds	r3, r3, r3
 8002b00:	643b      	str	r3, [r7, #64]	; 0x40
 8002b02:	4613      	mov	r3, r2
 8002b04:	eb42 0303 	adc.w	r3, r2, r3
 8002b08:	647b      	str	r3, [r7, #68]	; 0x44
 8002b0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b12:	f7fd fb5d 	bl	80001d0 <__aeabi_uldivmod>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <UART_SetConfig+0x2d4>)
 8002b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	2264      	movs	r2, #100	; 0x64
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	1acb      	subs	r3, r1, r3
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b32:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <UART_SetConfig+0x2d4>)
 8002b34:	fba3 2302 	umull	r2, r3, r3, r2
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b40:	441c      	add	r4, r3
 8002b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b46:	2200      	movs	r2, #0
 8002b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b54:	4642      	mov	r2, r8
 8002b56:	464b      	mov	r3, r9
 8002b58:	1891      	adds	r1, r2, r2
 8002b5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b5c:	415b      	adcs	r3, r3
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b64:	4641      	mov	r1, r8
 8002b66:	1851      	adds	r1, r2, r1
 8002b68:	6339      	str	r1, [r7, #48]	; 0x30
 8002b6a:	4649      	mov	r1, r9
 8002b6c:	414b      	adcs	r3, r1
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b7c:	4659      	mov	r1, fp
 8002b7e:	00cb      	lsls	r3, r1, #3
 8002b80:	4651      	mov	r1, sl
 8002b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b86:	4651      	mov	r1, sl
 8002b88:	00ca      	lsls	r2, r1, #3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4642      	mov	r2, r8
 8002b92:	189b      	adds	r3, r3, r2
 8002b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b98:	464b      	mov	r3, r9
 8002b9a:	460a      	mov	r2, r1
 8002b9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002bb8:	460b      	mov	r3, r1
 8002bba:	18db      	adds	r3, r3, r3
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	eb42 0303 	adc.w	r3, r2, r3
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bce:	f7fd faff 	bl	80001d0 <__aeabi_uldivmod>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <UART_SetConfig+0x2d4>)
 8002bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	2164      	movs	r1, #100	; 0x64
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	3332      	adds	r3, #50	; 0x32
 8002bea:	4a08      	ldr	r2, [pc, #32]	; (8002c0c <UART_SetConfig+0x2d4>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	f003 0207 	and.w	r2, r3, #7
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4422      	add	r2, r4
 8002bfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c00:	e105      	b.n	8002e0e <UART_SetConfig+0x4d6>
 8002c02:	bf00      	nop
 8002c04:	40011000 	.word	0x40011000
 8002c08:	40011400 	.word	0x40011400
 8002c0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c14:	2200      	movs	r2, #0
 8002c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c22:	4642      	mov	r2, r8
 8002c24:	464b      	mov	r3, r9
 8002c26:	1891      	adds	r1, r2, r2
 8002c28:	6239      	str	r1, [r7, #32]
 8002c2a:	415b      	adcs	r3, r3
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c32:	4641      	mov	r1, r8
 8002c34:	1854      	adds	r4, r2, r1
 8002c36:	4649      	mov	r1, r9
 8002c38:	eb43 0501 	adc.w	r5, r3, r1
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	00eb      	lsls	r3, r5, #3
 8002c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c4a:	00e2      	lsls	r2, r4, #3
 8002c4c:	4614      	mov	r4, r2
 8002c4e:	461d      	mov	r5, r3
 8002c50:	4643      	mov	r3, r8
 8002c52:	18e3      	adds	r3, r4, r3
 8002c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c58:	464b      	mov	r3, r9
 8002c5a:	eb45 0303 	adc.w	r3, r5, r3
 8002c5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c7e:	4629      	mov	r1, r5
 8002c80:	008b      	lsls	r3, r1, #2
 8002c82:	4621      	mov	r1, r4
 8002c84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c88:	4621      	mov	r1, r4
 8002c8a:	008a      	lsls	r2, r1, #2
 8002c8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c90:	f7fd fa9e 	bl	80001d0 <__aeabi_uldivmod>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4b60      	ldr	r3, [pc, #384]	; (8002e1c <UART_SetConfig+0x4e4>)
 8002c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	011c      	lsls	r4, r3, #4
 8002ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002cb4:	4642      	mov	r2, r8
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	1891      	adds	r1, r2, r2
 8002cba:	61b9      	str	r1, [r7, #24]
 8002cbc:	415b      	adcs	r3, r3
 8002cbe:	61fb      	str	r3, [r7, #28]
 8002cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc4:	4641      	mov	r1, r8
 8002cc6:	1851      	adds	r1, r2, r1
 8002cc8:	6139      	str	r1, [r7, #16]
 8002cca:	4649      	mov	r1, r9
 8002ccc:	414b      	adcs	r3, r1
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cdc:	4659      	mov	r1, fp
 8002cde:	00cb      	lsls	r3, r1, #3
 8002ce0:	4651      	mov	r1, sl
 8002ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ce6:	4651      	mov	r1, sl
 8002ce8:	00ca      	lsls	r2, r1, #3
 8002cea:	4610      	mov	r0, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	189b      	adds	r3, r3, r2
 8002cf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cf8:	464b      	mov	r3, r9
 8002cfa:	460a      	mov	r2, r1
 8002cfc:	eb42 0303 	adc.w	r3, r2, r3
 8002d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	008b      	lsls	r3, r1, #2
 8002d20:	4641      	mov	r1, r8
 8002d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d26:	4641      	mov	r1, r8
 8002d28:	008a      	lsls	r2, r1, #2
 8002d2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d2e:	f7fd fa4f 	bl	80001d0 <__aeabi_uldivmod>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <UART_SetConfig+0x4e4>)
 8002d38:	fba3 1302 	umull	r1, r3, r3, r2
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	2164      	movs	r1, #100	; 0x64
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	3332      	adds	r3, #50	; 0x32
 8002d4a:	4a34      	ldr	r2, [pc, #208]	; (8002e1c <UART_SetConfig+0x4e4>)
 8002d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d56:	441c      	add	r4, r3
 8002d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	673b      	str	r3, [r7, #112]	; 0x70
 8002d60:	677a      	str	r2, [r7, #116]	; 0x74
 8002d62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d66:	4642      	mov	r2, r8
 8002d68:	464b      	mov	r3, r9
 8002d6a:	1891      	adds	r1, r2, r2
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	415b      	adcs	r3, r3
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d76:	4641      	mov	r1, r8
 8002d78:	1851      	adds	r1, r2, r1
 8002d7a:	6039      	str	r1, [r7, #0]
 8002d7c:	4649      	mov	r1, r9
 8002d7e:	414b      	adcs	r3, r1
 8002d80:	607b      	str	r3, [r7, #4]
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d8e:	4659      	mov	r1, fp
 8002d90:	00cb      	lsls	r3, r1, #3
 8002d92:	4651      	mov	r1, sl
 8002d94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d98:	4651      	mov	r1, sl
 8002d9a:	00ca      	lsls	r2, r1, #3
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4603      	mov	r3, r0
 8002da2:	4642      	mov	r2, r8
 8002da4:	189b      	adds	r3, r3, r2
 8002da6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002da8:	464b      	mov	r3, r9
 8002daa:	460a      	mov	r2, r1
 8002dac:	eb42 0303 	adc.w	r3, r2, r3
 8002db0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	663b      	str	r3, [r7, #96]	; 0x60
 8002dbc:	667a      	str	r2, [r7, #100]	; 0x64
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002dca:	4649      	mov	r1, r9
 8002dcc:	008b      	lsls	r3, r1, #2
 8002dce:	4641      	mov	r1, r8
 8002dd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dd4:	4641      	mov	r1, r8
 8002dd6:	008a      	lsls	r2, r1, #2
 8002dd8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ddc:	f7fd f9f8 	bl	80001d0 <__aeabi_uldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <UART_SetConfig+0x4e4>)
 8002de6:	fba3 1302 	umull	r1, r3, r3, r2
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	2164      	movs	r1, #100	; 0x64
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	3332      	adds	r3, #50	; 0x32
 8002df8:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <UART_SetConfig+0x4e4>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	f003 020f 	and.w	r2, r3, #15
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4422      	add	r2, r4
 8002e0c:	609a      	str	r2, [r3, #8]
}
 8002e0e:	bf00      	nop
 8002e10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e14:	46bd      	mov	sp, r7
 8002e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e1a:	bf00      	nop
 8002e1c:	51eb851f 	.word	0x51eb851f

08002e20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f103 0208 	add.w	r2, r3, #8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f04f 32ff 	mov.w	r2, #4294967295
 8002e38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f103 0208 	add.w	r2, r3, #8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f103 0208 	add.w	r2, r3, #8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b085      	sub	sp, #20
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	601a      	str	r2, [r3, #0]
}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d103      	bne.n	8002ee2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e00c      	b.n	8002efc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3308      	adds	r3, #8
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	e002      	b.n	8002ef0 <vListInsert+0x2e>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d2f6      	bcs.n	8002eea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	601a      	str	r2, [r3, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6892      	ldr	r2, [r2, #8]
 8002f4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6852      	ldr	r2, [r2, #4]
 8002f54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d103      	bne.n	8002f68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	1e5a      	subs	r2, r3, #1
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10a      	bne.n	8002fb2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f9c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fae:	bf00      	nop
 8002fb0:	e7fe      	b.n	8002fb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002fb2:	f002 fa47 	bl	8005444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	68f9      	ldr	r1, [r7, #12]
 8002fc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	441a      	add	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	68f9      	ldr	r1, [r7, #12]
 8002fe6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	441a      	add	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	22ff      	movs	r2, #255	; 0xff
 8002ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	22ff      	movs	r2, #255	; 0xff
 8002ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d114      	bne.n	8003032 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01a      	beq.n	8003046 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3310      	adds	r3, #16
 8003014:	4618      	mov	r0, r3
 8003016:	f001 f9f3 	bl	8004400 <xTaskRemoveFromEventList>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d012      	beq.n	8003046 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <xQueueGenericReset+0xcc>)
 8003022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	e009      	b.n	8003046 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3310      	adds	r3, #16
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fef2 	bl	8002e20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3324      	adds	r3, #36	; 0x24
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff feed 	bl	8002e20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003046:	f002 fa2d 	bl	80054a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800304a:	2301      	movs	r3, #1
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	e000ed04 	.word	0xe000ed04

08003058 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	; 0x28
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	4613      	mov	r3, r2
 8003064:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <xQueueGenericCreate+0x2a>
	__asm volatile
 800306c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	613b      	str	r3, [r7, #16]
}
 800307e:	bf00      	nop
 8003080:	e7fe      	b.n	8003080 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d102      	bne.n	800308e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
 800308c:	e004      	b.n	8003098 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	3350      	adds	r3, #80	; 0x50
 800309c:	4618      	mov	r0, r3
 800309e:	f002 faf3 	bl	8005688 <pvPortMalloc>
 80030a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	3350      	adds	r3, #80	; 0x50
 80030b2:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030b4:	79fa      	ldrb	r2, [r7, #7]
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	4613      	mov	r3, r2
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f805 	bl	80030d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030c6:	69bb      	ldr	r3, [r7, #24]
	}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3720      	adds	r7, #32
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d103      	bne.n	80030ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	e002      	b.n	80030f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80030fe:	2101      	movs	r1, #1
 8003100:	69b8      	ldr	r0, [r7, #24]
 8003102:	f7ff ff41 	bl	8002f88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08e      	sub	sp, #56	; 0x38
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003126:	2300      	movs	r3, #0
 8003128:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10a      	bne.n	800314a <xQueueGenericSend+0x32>
	__asm volatile
 8003134:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003146:	bf00      	nop
 8003148:	e7fe      	b.n	8003148 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d103      	bne.n	8003158 <xQueueGenericSend+0x40>
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <xQueueGenericSend+0x44>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <xQueueGenericSend+0x46>
 800315c:	2300      	movs	r3, #0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10a      	bne.n	8003178 <xQueueGenericSend+0x60>
	__asm volatile
 8003162:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003174:	bf00      	nop
 8003176:	e7fe      	b.n	8003176 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d103      	bne.n	8003186 <xQueueGenericSend+0x6e>
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <xQueueGenericSend+0x72>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <xQueueGenericSend+0x74>
 800318a:	2300      	movs	r3, #0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8003190:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	623b      	str	r3, [r7, #32]
}
 80031a2:	bf00      	nop
 80031a4:	e7fe      	b.n	80031a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031a6:	f001 fac7 	bl	8004738 <xTaskGetSchedulerState>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <xQueueGenericSend+0x9e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <xQueueGenericSend+0xa2>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <xQueueGenericSend+0xa4>
 80031ba:	2300      	movs	r3, #0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10a      	bne.n	80031d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80031c0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	61fb      	str	r3, [r7, #28]
}
 80031d2:	bf00      	nop
 80031d4:	e7fe      	b.n	80031d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031d6:	f002 f935 	bl	8005444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d302      	bcc.n	80031ec <xQueueGenericSend+0xd4>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d129      	bne.n	8003240 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031f2:	f000 fbb9 	bl	8003968 <prvCopyDataToQueue>
 80031f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d010      	beq.n	8003222 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003202:	3324      	adds	r3, #36	; 0x24
 8003204:	4618      	mov	r0, r3
 8003206:	f001 f8fb 	bl	8004400 <xTaskRemoveFromEventList>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d013      	beq.n	8003238 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003210:	4b3f      	ldr	r3, [pc, #252]	; (8003310 <xQueueGenericSend+0x1f8>)
 8003212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	e00a      	b.n	8003238 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003228:	4b39      	ldr	r3, [pc, #228]	; (8003310 <xQueueGenericSend+0x1f8>)
 800322a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003238:	f002 f934 	bl	80054a4 <vPortExitCritical>
				return pdPASS;
 800323c:	2301      	movs	r3, #1
 800323e:	e063      	b.n	8003308 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d103      	bne.n	800324e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003246:	f002 f92d 	bl	80054a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800324a:	2300      	movs	r3, #0
 800324c:	e05c      	b.n	8003308 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800324e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003250:	2b00      	cmp	r3, #0
 8003252:	d106      	bne.n	8003262 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003254:	f107 0314 	add.w	r3, r7, #20
 8003258:	4618      	mov	r0, r3
 800325a:	f001 f933 	bl	80044c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800325e:	2301      	movs	r3, #1
 8003260:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003262:	f002 f91f 	bl	80054a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003266:	f000 fead 	bl	8003fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800326a:	f002 f8eb 	bl	8005444 <vPortEnterCritical>
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003274:	b25b      	sxtb	r3, r3
 8003276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327a:	d103      	bne.n	8003284 <xQueueGenericSend+0x16c>
 800327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800328a:	b25b      	sxtb	r3, r3
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003290:	d103      	bne.n	800329a <xQueueGenericSend+0x182>
 8003292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800329a:	f002 f903 	bl	80054a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800329e:	1d3a      	adds	r2, r7, #4
 80032a0:	f107 0314 	add.w	r3, r7, #20
 80032a4:	4611      	mov	r1, r2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f001 f922 	bl	80044f0 <xTaskCheckForTimeOut>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d124      	bne.n	80032fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032b4:	f000 fc50 	bl	8003b58 <prvIsQueueFull>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d018      	beq.n	80032f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	3310      	adds	r3, #16
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 f84a 	bl	8004360 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80032cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032ce:	f000 fbdb 	bl	8003a88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80032d2:	f000 fe85 	bl	8003fe0 <xTaskResumeAll>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f47f af7c 	bne.w	80031d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80032de:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <xQueueGenericSend+0x1f8>)
 80032e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	e772      	b.n	80031d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80032f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032f2:	f000 fbc9 	bl	8003a88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032f6:	f000 fe73 	bl	8003fe0 <xTaskResumeAll>
 80032fa:	e76c      	b.n	80031d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80032fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032fe:	f000 fbc3 	bl	8003a88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003302:	f000 fe6d 	bl	8003fe0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003306:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003308:	4618      	mov	r0, r3
 800330a:	3738      	adds	r7, #56	; 0x38
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	e000ed04 	.word	0xe000ed04

08003314 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08e      	sub	sp, #56	; 0x38
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800332c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800333e:	bf00      	nop
 8003340:	e7fe      	b.n	8003340 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d103      	bne.n	8003350 <xQueueGenericSendFromISR+0x3c>
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <xQueueGenericSendFromISR+0x40>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <xQueueGenericSendFromISR+0x42>
 8003354:	2300      	movs	r3, #0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10a      	bne.n	8003370 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800335a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	623b      	str	r3, [r7, #32]
}
 800336c:	bf00      	nop
 800336e:	e7fe      	b.n	800336e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d103      	bne.n	800337e <xQueueGenericSendFromISR+0x6a>
 8003376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <xQueueGenericSendFromISR+0x6e>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <xQueueGenericSendFromISR+0x70>
 8003382:	2300      	movs	r3, #0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003388:	f04f 0340 	mov.w	r3, #64	; 0x40
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	61fb      	str	r3, [r7, #28]
}
 800339a:	bf00      	nop
 800339c:	e7fe      	b.n	800339c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800339e:	f002 f933 	bl	8005608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033a2:	f3ef 8211 	mrs	r2, BASEPRI
 80033a6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	61ba      	str	r2, [r7, #24]
 80033b8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80033ba:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <xQueueGenericSendFromISR+0xbc>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d12c      	bne.n	800342a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033e0:	f000 fac2 	bl	8003968 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80033e4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d112      	bne.n	8003414 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	3324      	adds	r3, #36	; 0x24
 80033fa:	4618      	mov	r0, r3
 80033fc:	f001 f800 	bl	8004400 <xTaskRemoveFromEventList>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00e      	beq.n	8003424 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00b      	beq.n	8003424 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	e007      	b.n	8003424 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003414:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003418:	3301      	adds	r3, #1
 800341a:	b2db      	uxtb	r3, r3
 800341c:	b25a      	sxtb	r2, r3
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003424:	2301      	movs	r3, #1
 8003426:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003428:	e001      	b.n	800342e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800342a:	2300      	movs	r3, #0
 800342c:	637b      	str	r3, [r7, #52]	; 0x34
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003438:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800343a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800343c:	4618      	mov	r0, r3
 800343e:	3738      	adds	r7, #56	; 0x38
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08e      	sub	sp, #56	; 0x38
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10a      	bne.n	800346e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003458:	f04f 0340 	mov.w	r3, #64	; 0x40
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	623b      	str	r3, [r7, #32]
}
 800346a:	bf00      	nop
 800346c:	e7fe      	b.n	800346c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <xQueueGiveFromISR+0x48>
	__asm volatile
 8003476:	f04f 0340 	mov.w	r3, #64	; 0x40
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	61fb      	str	r3, [r7, #28]
}
 8003488:	bf00      	nop
 800348a:	e7fe      	b.n	800348a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d103      	bne.n	800349c <xQueueGiveFromISR+0x58>
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <xQueueGiveFromISR+0x5c>
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <xQueueGiveFromISR+0x5e>
 80034a0:	2300      	movs	r3, #0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10a      	bne.n	80034bc <xQueueGiveFromISR+0x78>
	__asm volatile
 80034a6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	61bb      	str	r3, [r7, #24]
}
 80034b8:	bf00      	nop
 80034ba:	e7fe      	b.n	80034ba <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034bc:	f002 f8a4 	bl	8005608 <vPortValidateInterruptPriority>
	__asm volatile
 80034c0:	f3ef 8211 	mrs	r2, BASEPRI
 80034c4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	617a      	str	r2, [r7, #20]
 80034d6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80034d8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d22b      	bcs.n	8003544 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80034fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d112      	bne.n	800352e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	2b00      	cmp	r3, #0
 800350e:	d016      	beq.n	800353e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003512:	3324      	adds	r3, #36	; 0x24
 8003514:	4618      	mov	r0, r3
 8003516:	f000 ff73 	bl	8004400 <xTaskRemoveFromEventList>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00e      	beq.n	800353e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2201      	movs	r2, #1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e007      	b.n	800353e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800352e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003532:	3301      	adds	r3, #1
 8003534:	b2db      	uxtb	r3, r3
 8003536:	b25a      	sxtb	r2, r3
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800353e:	2301      	movs	r3, #1
 8003540:	637b      	str	r3, [r7, #52]	; 0x34
 8003542:	e001      	b.n	8003548 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003544:	2300      	movs	r3, #0
 8003546:	637b      	str	r3, [r7, #52]	; 0x34
 8003548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f383 8811 	msr	BASEPRI, r3
}
 8003552:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003556:	4618      	mov	r0, r3
 8003558:	3738      	adds	r7, #56	; 0x38
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08c      	sub	sp, #48	; 0x30
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800356c:	2300      	movs	r3, #0
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <xQueueReceive+0x30>
	__asm volatile
 800357a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	623b      	str	r3, [r7, #32]
}
 800358c:	bf00      	nop
 800358e:	e7fe      	b.n	800358e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d103      	bne.n	800359e <xQueueReceive+0x3e>
 8003596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <xQueueReceive+0x42>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <xQueueReceive+0x44>
 80035a2:	2300      	movs	r3, #0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <xQueueReceive+0x5e>
	__asm volatile
 80035a8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	61fb      	str	r3, [r7, #28]
}
 80035ba:	bf00      	nop
 80035bc:	e7fe      	b.n	80035bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035be:	f001 f8bb 	bl	8004738 <xTaskGetSchedulerState>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <xQueueReceive+0x6e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <xQueueReceive+0x72>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <xQueueReceive+0x74>
 80035d2:	2300      	movs	r3, #0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10a      	bne.n	80035ee <xQueueReceive+0x8e>
	__asm volatile
 80035d8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	61bb      	str	r3, [r7, #24]
}
 80035ea:	bf00      	nop
 80035ec:	e7fe      	b.n	80035ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035ee:	f001 ff29 	bl	8005444 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d01f      	beq.n	800363e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003602:	f000 fa1b 	bl	8003a3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	1e5a      	subs	r2, r3, #1
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00f      	beq.n	8003636 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	3310      	adds	r3, #16
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fef0 	bl	8004400 <xTaskRemoveFromEventList>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003626:	4b3d      	ldr	r3, [pc, #244]	; (800371c <xQueueReceive+0x1bc>)
 8003628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003636:	f001 ff35 	bl	80054a4 <vPortExitCritical>
				return pdPASS;
 800363a:	2301      	movs	r3, #1
 800363c:	e069      	b.n	8003712 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d103      	bne.n	800364c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003644:	f001 ff2e 	bl	80054a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003648:	2300      	movs	r3, #0
 800364a:	e062      	b.n	8003712 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003652:	f107 0310 	add.w	r3, r7, #16
 8003656:	4618      	mov	r0, r3
 8003658:	f000 ff34 	bl	80044c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800365c:	2301      	movs	r3, #1
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003660:	f001 ff20 	bl	80054a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003664:	f000 fcae 	bl	8003fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003668:	f001 feec 	bl	8005444 <vPortEnterCritical>
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003672:	b25b      	sxtb	r3, r3
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d103      	bne.n	8003682 <xQueueReceive+0x122>
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003688:	b25b      	sxtb	r3, r3
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368e:	d103      	bne.n	8003698 <xQueueReceive+0x138>
 8003690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003698:	f001 ff04 	bl	80054a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800369c:	1d3a      	adds	r2, r7, #4
 800369e:	f107 0310 	add.w	r3, r7, #16
 80036a2:	4611      	mov	r1, r2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 ff23 	bl	80044f0 <xTaskCheckForTimeOut>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d123      	bne.n	80036f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036b2:	f000 fa3b 	bl	8003b2c <prvIsQueueEmpty>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d017      	beq.n	80036ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036be:	3324      	adds	r3, #36	; 0x24
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fe4b 	bl	8004360 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036cc:	f000 f9dc 	bl	8003a88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036d0:	f000 fc86 	bl	8003fe0 <xTaskResumeAll>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d189      	bne.n	80035ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <xQueueReceive+0x1bc>)
 80036dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	f3bf 8f6f 	isb	sy
 80036ea:	e780      	b.n	80035ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80036ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036ee:	f000 f9cb 	bl	8003a88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036f2:	f000 fc75 	bl	8003fe0 <xTaskResumeAll>
 80036f6:	e77a      	b.n	80035ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80036f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036fa:	f000 f9c5 	bl	8003a88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036fe:	f000 fc6f 	bl	8003fe0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003704:	f000 fa12 	bl	8003b2c <prvIsQueueEmpty>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	f43f af6f 	beq.w	80035ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003710:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003712:	4618      	mov	r0, r3
 8003714:	3730      	adds	r7, #48	; 0x30
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	e000ed04 	.word	0xe000ed04

08003720 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08e      	sub	sp, #56	; 0x38
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800372a:	2300      	movs	r3, #0
 800372c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003732:	2300      	movs	r3, #0
 8003734:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10a      	bne.n	8003752 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800373c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	623b      	str	r3, [r7, #32]
}
 800374e:	bf00      	nop
 8003750:	e7fe      	b.n	8003750 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800375a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	61fb      	str	r3, [r7, #28]
}
 800376c:	bf00      	nop
 800376e:	e7fe      	b.n	800376e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003770:	f000 ffe2 	bl	8004738 <xTaskGetSchedulerState>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d102      	bne.n	8003780 <xQueueSemaphoreTake+0x60>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <xQueueSemaphoreTake+0x64>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <xQueueSemaphoreTake+0x66>
 8003784:	2300      	movs	r3, #0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10a      	bne.n	80037a0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800378a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	61bb      	str	r3, [r7, #24]
}
 800379c:	bf00      	nop
 800379e:	e7fe      	b.n	800379e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037a0:	f001 fe50 	bl	8005444 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d024      	beq.n	80037fa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	1e5a      	subs	r2, r3, #1
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d104      	bne.n	80037ca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80037c0:	f001 f978 	bl	8004ab4 <pvTaskIncrementMutexHeldCount>
 80037c4:	4602      	mov	r2, r0
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00f      	beq.n	80037f2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	3310      	adds	r3, #16
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fe12 	bl	8004400 <xTaskRemoveFromEventList>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037e2:	4b54      	ldr	r3, [pc, #336]	; (8003934 <xQueueSemaphoreTake+0x214>)
 80037e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037f2:	f001 fe57 	bl	80054a4 <vPortExitCritical>
				return pdPASS;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e097      	b.n	800392a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d111      	bne.n	8003824 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003806:	f04f 0340 	mov.w	r3, #64	; 0x40
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	617b      	str	r3, [r7, #20]
}
 8003818:	bf00      	nop
 800381a:	e7fe      	b.n	800381a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800381c:	f001 fe42 	bl	80054a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003820:	2300      	movs	r3, #0
 8003822:	e082      	b.n	800392a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800382a:	f107 030c 	add.w	r3, r7, #12
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fe48 	bl	80044c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003834:	2301      	movs	r3, #1
 8003836:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003838:	f001 fe34 	bl	80054a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800383c:	f000 fbc2 	bl	8003fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003840:	f001 fe00 	bl	8005444 <vPortEnterCritical>
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800384a:	b25b      	sxtb	r3, r3
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d103      	bne.n	800385a <xQueueSemaphoreTake+0x13a>
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003860:	b25b      	sxtb	r3, r3
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003866:	d103      	bne.n	8003870 <xQueueSemaphoreTake+0x150>
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003870:	f001 fe18 	bl	80054a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003874:	463a      	mov	r2, r7
 8003876:	f107 030c 	add.w	r3, r7, #12
 800387a:	4611      	mov	r1, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fe37 	bl	80044f0 <xTaskCheckForTimeOut>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d132      	bne.n	80038ee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800388a:	f000 f94f 	bl	8003b2c <prvIsQueueEmpty>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d026      	beq.n	80038e2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800389c:	f001 fdd2 	bl	8005444 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 ff65 	bl	8004774 <xTaskPriorityInherit>
 80038aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80038ac:	f001 fdfa 	bl	80054a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b2:	3324      	adds	r3, #36	; 0x24
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	4611      	mov	r1, r2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fd51 	bl	8004360 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038c0:	f000 f8e2 	bl	8003a88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038c4:	f000 fb8c 	bl	8003fe0 <xTaskResumeAll>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f47f af68 	bne.w	80037a0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80038d0:	4b18      	ldr	r3, [pc, #96]	; (8003934 <xQueueSemaphoreTake+0x214>)
 80038d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	e75e      	b.n	80037a0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80038e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038e4:	f000 f8d0 	bl	8003a88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038e8:	f000 fb7a 	bl	8003fe0 <xTaskResumeAll>
 80038ec:	e758      	b.n	80037a0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80038ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038f0:	f000 f8ca 	bl	8003a88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038f4:	f000 fb74 	bl	8003fe0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038fa:	f000 f917 	bl	8003b2c <prvIsQueueEmpty>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	f43f af4d 	beq.w	80037a0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00d      	beq.n	8003928 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800390c:	f001 fd9a 	bl	8005444 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003910:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003912:	f000 f811 	bl	8003938 <prvGetDisinheritPriorityAfterTimeout>
 8003916:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800391e:	4618      	mov	r0, r3
 8003920:	f001 f82e 	bl	8004980 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003924:	f001 fdbe 	bl	80054a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003928:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800392a:	4618      	mov	r0, r3
 800392c:	3738      	adds	r7, #56	; 0x38
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	e000ed04 	.word	0xe000ed04

08003938 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	2b00      	cmp	r3, #0
 8003946:	d006      	beq.n	8003956 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f1c3 030f 	rsb	r3, r3, #15
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	e001      	b.n	800395a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800395a:	68fb      	ldr	r3, [r7, #12]
	}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10d      	bne.n	80039a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d14d      	bne.n	8003a2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	4618      	mov	r0, r3
 8003994:	f000 ff6e 	bl	8004874 <xTaskPriorityDisinherit>
 8003998:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	609a      	str	r2, [r3, #8]
 80039a0:	e043      	b.n	8003a2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d119      	bne.n	80039dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6858      	ldr	r0, [r3, #4]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	461a      	mov	r2, r3
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	f002 f866 	bl	8005a84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	441a      	add	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d32b      	bcc.n	8003a2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	e026      	b.n	8003a2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	68d8      	ldr	r0, [r3, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	461a      	mov	r2, r3
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	f002 f84c 	bl	8005a84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	425b      	negs	r3, r3
 80039f6:	441a      	add	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d207      	bcs.n	8003a18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	425b      	negs	r3, r3
 8003a12:	441a      	add	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d105      	bne.n	8003a2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003a32:	697b      	ldr	r3, [r7, #20]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d018      	beq.n	8003a80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	441a      	add	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d303      	bcc.n	8003a70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68d9      	ldr	r1, [r3, #12]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	461a      	mov	r2, r3
 8003a7a:	6838      	ldr	r0, [r7, #0]
 8003a7c:	f002 f802 	bl	8005a84 <memcpy>
	}
}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a90:	f001 fcd8 	bl	8005444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a9c:	e011      	b.n	8003ac2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d012      	beq.n	8003acc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3324      	adds	r3, #36	; 0x24
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fca8 	bl	8004400 <xTaskRemoveFromEventList>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ab6:	f000 fd7d 	bl	80045b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	dce9      	bgt.n	8003a9e <prvUnlockQueue+0x16>
 8003aca:	e000      	b.n	8003ace <prvUnlockQueue+0x46>
					break;
 8003acc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	22ff      	movs	r2, #255	; 0xff
 8003ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ad6:	f001 fce5 	bl	80054a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ada:	f001 fcb3 	bl	8005444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ae4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ae6:	e011      	b.n	8003b0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d012      	beq.n	8003b16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3310      	adds	r3, #16
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fc83 	bl	8004400 <xTaskRemoveFromEventList>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b00:	f000 fd58 	bl	80045b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b04:	7bbb      	ldrb	r3, [r7, #14]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	dce9      	bgt.n	8003ae8 <prvUnlockQueue+0x60>
 8003b14:	e000      	b.n	8003b18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	22ff      	movs	r2, #255	; 0xff
 8003b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003b20:	f001 fcc0 	bl	80054a4 <vPortExitCritical>
}
 8003b24:	bf00      	nop
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b34:	f001 fc86 	bl	8005444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b40:	2301      	movs	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	e001      	b.n	8003b4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b4a:	f001 fcab 	bl	80054a4 <vPortExitCritical>

	return xReturn;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b60:	f001 fc70 	bl	8005444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d102      	bne.n	8003b76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b70:	2301      	movs	r3, #1
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	e001      	b.n	8003b7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b7a:	f001 fc93 	bl	80054a4 <vPortExitCritical>

	return xReturn;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	e014      	b.n	8003bc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b98:	4a0f      	ldr	r2, [pc, #60]	; (8003bd8 <vQueueAddToRegistry+0x50>)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10b      	bne.n	8003bbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ba4:	490c      	ldr	r1, [pc, #48]	; (8003bd8 <vQueueAddToRegistry+0x50>)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003bae:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <vQueueAddToRegistry+0x50>)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003bba:	e006      	b.n	8003bca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b07      	cmp	r3, #7
 8003bc6:	d9e7      	bls.n	8003b98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000118 	.word	0x20000118

08003bdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003bec:	f001 fc2a 	bl	8005444 <vPortEnterCritical>
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bf6:	b25b      	sxtb	r3, r3
 8003bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfc:	d103      	bne.n	8003c06 <vQueueWaitForMessageRestricted+0x2a>
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c0c:	b25b      	sxtb	r3, r3
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	d103      	bne.n	8003c1c <vQueueWaitForMessageRestricted+0x40>
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c1c:	f001 fc42 	bl	80054a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	3324      	adds	r3, #36	; 0x24
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fbb9 	bl	80043a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c36:	6978      	ldr	r0, [r7, #20]
 8003c38:	f7ff ff26 	bl	8003a88 <prvUnlockQueue>
	}
 8003c3c:	bf00      	nop
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08c      	sub	sp, #48	; 0x30
 8003c48:	af04      	add	r7, sp, #16
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f001 fd15 	bl	8005688 <pvPortMalloc>
 8003c5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00e      	beq.n	8003c84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c66:	2058      	movs	r0, #88	; 0x58
 8003c68:	f001 fd0e 	bl	8005688 <pvPortMalloc>
 8003c6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30
 8003c7a:	e005      	b.n	8003c88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c7c:	6978      	ldr	r0, [r7, #20]
 8003c7e:	f001 fdc7 	bl	8005810 <vPortFree>
 8003c82:	e001      	b.n	8003c88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d013      	beq.n	8003cb6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	2300      	movs	r3, #0
 8003c92:	9303      	str	r3, [sp, #12]
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	9302      	str	r3, [sp, #8]
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	9301      	str	r3, [sp, #4]
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 f80e 	bl	8003cc6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003caa:	69f8      	ldr	r0, [r7, #28]
 8003cac:	f000 f89a 	bl	8003de4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	e002      	b.n	8003cbc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cbc:	69bb      	ldr	r3, [r7, #24]
	}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3720      	adds	r7, #32
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b088      	sub	sp, #32
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	21a5      	movs	r1, #165	; 0xa5
 8003ce0:	f001 fede 	bl	8005aa0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	f023 0307 	bic.w	r3, r3, #7
 8003cfc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <prvInitialiseNewTask+0x58>
	__asm volatile
 8003d08:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	617b      	str	r3, [r7, #20]
}
 8003d1a:	bf00      	nop
 8003d1c:	e7fe      	b.n	8003d1c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01f      	beq.n	8003d64 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d24:	2300      	movs	r3, #0
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	e012      	b.n	8003d50 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	4413      	add	r3, r2
 8003d30:	7819      	ldrb	r1, [r3, #0]
 8003d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	4413      	add	r3, r2
 8003d38:	3334      	adds	r3, #52	; 0x34
 8003d3a:	460a      	mov	r2, r1
 8003d3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	4413      	add	r3, r2
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d006      	beq.n	8003d58 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b09      	cmp	r3, #9
 8003d54:	d9e9      	bls.n	8003d2a <prvInitialiseNewTask+0x64>
 8003d56:	e000      	b.n	8003d5a <prvInitialiseNewTask+0x94>
			{
				break;
 8003d58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d62:	e003      	b.n	8003d6c <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	2b0e      	cmp	r3, #14
 8003d70:	d901      	bls.n	8003d76 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d72:	230e      	movs	r3, #14
 8003d74:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d7a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d80:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	2200      	movs	r2, #0
 8003d86:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff f867 	bl	8002e60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	3318      	adds	r3, #24
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff f862 	bl	8002e60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	f1c3 020f 	rsb	r2, r3, #15
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	2200      	movs	r2, #0
 8003db6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	68f9      	ldr	r1, [r7, #12]
 8003dc4:	69b8      	ldr	r0, [r7, #24]
 8003dc6:	f001 fa01 	bl	80051cc <pxPortInitialiseStack>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ddc:	bf00      	nop
 8003dde:	3720      	adds	r7, #32
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003dec:	f001 fb2a 	bl	8005444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003df0:	4b2c      	ldr	r3, [pc, #176]	; (8003ea4 <prvAddNewTaskToReadyList+0xc0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	4a2b      	ldr	r2, [pc, #172]	; (8003ea4 <prvAddNewTaskToReadyList+0xc0>)
 8003df8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003dfa:	4b2b      	ldr	r3, [pc, #172]	; (8003ea8 <prvAddNewTaskToReadyList+0xc4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e02:	4a29      	ldr	r2, [pc, #164]	; (8003ea8 <prvAddNewTaskToReadyList+0xc4>)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e08:	4b26      	ldr	r3, [pc, #152]	; (8003ea4 <prvAddNewTaskToReadyList+0xc0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d110      	bne.n	8003e32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e10:	f000 fbf4 	bl	80045fc <prvInitialiseTaskLists>
 8003e14:	e00d      	b.n	8003e32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e16:	4b25      	ldr	r3, [pc, #148]	; (8003eac <prvAddNewTaskToReadyList+0xc8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e1e:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <prvAddNewTaskToReadyList+0xc4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d802      	bhi.n	8003e32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e2c:	4a1e      	ldr	r2, [pc, #120]	; (8003ea8 <prvAddNewTaskToReadyList+0xc4>)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e32:	4b1f      	ldr	r3, [pc, #124]	; (8003eb0 <prvAddNewTaskToReadyList+0xcc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3301      	adds	r3, #1
 8003e38:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <prvAddNewTaskToReadyList+0xcc>)
 8003e3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e3c:	4b1c      	ldr	r3, [pc, #112]	; (8003eb0 <prvAddNewTaskToReadyList+0xcc>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	2201      	movs	r2, #1
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <prvAddNewTaskToReadyList+0xd0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <prvAddNewTaskToReadyList+0xd0>)
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <prvAddNewTaskToReadyList+0xd4>)
 8003e64:	441a      	add	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f7ff f804 	bl	8002e7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e72:	f001 fb17 	bl	80054a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e76:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <prvAddNewTaskToReadyList+0xc8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00e      	beq.n	8003e9c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <prvAddNewTaskToReadyList+0xc4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d207      	bcs.n	8003e9c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <prvAddNewTaskToReadyList+0xd8>)
 8003e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	200002f8 	.word	0x200002f8
 8003ea8:	20000158 	.word	0x20000158
 8003eac:	20000304 	.word	0x20000304
 8003eb0:	20000314 	.word	0x20000314
 8003eb4:	20000300 	.word	0x20000300
 8003eb8:	2000015c 	.word	0x2000015c
 8003ebc:	e000ed04 	.word	0xe000ed04

08003ec0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d017      	beq.n	8003f02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ed2:	4b13      	ldr	r3, [pc, #76]	; (8003f20 <vTaskDelay+0x60>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <vTaskDelay+0x30>
	__asm volatile
 8003eda:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	60bb      	str	r3, [r7, #8]
}
 8003eec:	bf00      	nop
 8003eee:	e7fe      	b.n	8003eee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ef0:	f000 f868 	bl	8003fc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fdf0 	bl	8004adc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003efc:	f000 f870 	bl	8003fe0 <xTaskResumeAll>
 8003f00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d107      	bne.n	8003f18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <vTaskDelay+0x64>)
 8003f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f18:	bf00      	nop
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20000320 	.word	0x20000320
 8003f24:	e000ed04 	.word	0xe000ed04

08003f28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003f2e:	4b1f      	ldr	r3, [pc, #124]	; (8003fac <vTaskStartScheduler+0x84>)
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	2300      	movs	r3, #0
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	2300      	movs	r3, #0
 8003f38:	2282      	movs	r2, #130	; 0x82
 8003f3a:	491d      	ldr	r1, [pc, #116]	; (8003fb0 <vTaskStartScheduler+0x88>)
 8003f3c:	481d      	ldr	r0, [pc, #116]	; (8003fb4 <vTaskStartScheduler+0x8c>)
 8003f3e:	f7ff fe81 	bl	8003c44 <xTaskCreate>
 8003f42:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d102      	bne.n	8003f50 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003f4a:	f000 fe2d 	bl	8004ba8 <xTimerCreateTimerTask>
 8003f4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d116      	bne.n	8003f84 <vTaskStartScheduler+0x5c>
	__asm volatile
 8003f56:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	60bb      	str	r3, [r7, #8]
}
 8003f68:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f6a:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <vTaskStartScheduler+0x90>)
 8003f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f72:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <vTaskStartScheduler+0x94>)
 8003f74:	2201      	movs	r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f78:	4b11      	ldr	r3, [pc, #68]	; (8003fc0 <vTaskStartScheduler+0x98>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f7e:	f001 f9af 	bl	80052e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f82:	e00e      	b.n	8003fa2 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d10a      	bne.n	8003fa2 <vTaskStartScheduler+0x7a>
	__asm volatile
 8003f8c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	607b      	str	r3, [r7, #4]
}
 8003f9e:	bf00      	nop
 8003fa0:	e7fe      	b.n	8003fa0 <vTaskStartScheduler+0x78>
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	2000031c 	.word	0x2000031c
 8003fb0:	08005ae0 	.word	0x08005ae0
 8003fb4:	080045cd 	.word	0x080045cd
 8003fb8:	20000318 	.word	0x20000318
 8003fbc:	20000304 	.word	0x20000304
 8003fc0:	200002fc 	.word	0x200002fc

08003fc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003fc8:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <vTaskSuspendAll+0x18>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	4a03      	ldr	r2, [pc, #12]	; (8003fdc <vTaskSuspendAll+0x18>)
 8003fd0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003fd2:	bf00      	nop
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	20000320 	.word	0x20000320

08003fe0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fee:	4b41      	ldr	r3, [pc, #260]	; (80040f4 <xTaskResumeAll+0x114>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <xTaskResumeAll+0x2c>
	__asm volatile
 8003ff6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	603b      	str	r3, [r7, #0]
}
 8004008:	bf00      	nop
 800400a:	e7fe      	b.n	800400a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800400c:	f001 fa1a 	bl	8005444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004010:	4b38      	ldr	r3, [pc, #224]	; (80040f4 <xTaskResumeAll+0x114>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3b01      	subs	r3, #1
 8004016:	4a37      	ldr	r2, [pc, #220]	; (80040f4 <xTaskResumeAll+0x114>)
 8004018:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800401a:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <xTaskResumeAll+0x114>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d161      	bne.n	80040e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004022:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <xTaskResumeAll+0x118>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d05d      	beq.n	80040e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800402a:	e02e      	b.n	800408a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800402c:	4b33      	ldr	r3, [pc, #204]	; (80040fc <xTaskResumeAll+0x11c>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3318      	adds	r3, #24
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe ff7b 	bl	8002f34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3304      	adds	r3, #4
 8004042:	4618      	mov	r0, r3
 8004044:	f7fe ff76 	bl	8002f34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	2201      	movs	r2, #1
 800404e:	409a      	lsls	r2, r3
 8004050:	4b2b      	ldr	r3, [pc, #172]	; (8004100 <xTaskResumeAll+0x120>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4313      	orrs	r3, r2
 8004056:	4a2a      	ldr	r2, [pc, #168]	; (8004100 <xTaskResumeAll+0x120>)
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4a27      	ldr	r2, [pc, #156]	; (8004104 <xTaskResumeAll+0x124>)
 8004068:	441a      	add	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3304      	adds	r3, #4
 800406e:	4619      	mov	r1, r3
 8004070:	4610      	mov	r0, r2
 8004072:	f7fe ff02 	bl	8002e7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407a:	4b23      	ldr	r3, [pc, #140]	; (8004108 <xTaskResumeAll+0x128>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	429a      	cmp	r2, r3
 8004082:	d302      	bcc.n	800408a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004084:	4b21      	ldr	r3, [pc, #132]	; (800410c <xTaskResumeAll+0x12c>)
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800408a:	4b1c      	ldr	r3, [pc, #112]	; (80040fc <xTaskResumeAll+0x11c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1cc      	bne.n	800402c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004098:	f000 fb2e 	bl	80046f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800409c:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <xTaskResumeAll+0x130>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d010      	beq.n	80040ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040a8:	f000 f846 	bl	8004138 <xTaskIncrementTick>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80040b2:	4b16      	ldr	r3, [pc, #88]	; (800410c <xTaskResumeAll+0x12c>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1f1      	bne.n	80040a8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80040c4:	4b12      	ldr	r3, [pc, #72]	; (8004110 <xTaskResumeAll+0x130>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <xTaskResumeAll+0x12c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040d2:	2301      	movs	r3, #1
 80040d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <xTaskResumeAll+0x134>)
 80040d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040e6:	f001 f9dd 	bl	80054a4 <vPortExitCritical>

	return xAlreadyYielded;
 80040ea:	68bb      	ldr	r3, [r7, #8]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20000320 	.word	0x20000320
 80040f8:	200002f8 	.word	0x200002f8
 80040fc:	200002b8 	.word	0x200002b8
 8004100:	20000300 	.word	0x20000300
 8004104:	2000015c 	.word	0x2000015c
 8004108:	20000158 	.word	0x20000158
 800410c:	2000030c 	.word	0x2000030c
 8004110:	20000308 	.word	0x20000308
 8004114:	e000ed04 	.word	0xe000ed04

08004118 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <xTaskGetTickCount+0x1c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004124:	687b      	ldr	r3, [r7, #4]
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	200002fc 	.word	0x200002fc

08004138 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004142:	4b4e      	ldr	r3, [pc, #312]	; (800427c <xTaskIncrementTick+0x144>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f040 8088 	bne.w	800425c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800414c:	4b4c      	ldr	r3, [pc, #304]	; (8004280 <xTaskIncrementTick+0x148>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3301      	adds	r3, #1
 8004152:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004154:	4a4a      	ldr	r2, [pc, #296]	; (8004280 <xTaskIncrementTick+0x148>)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d120      	bne.n	80041a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004160:	4b48      	ldr	r3, [pc, #288]	; (8004284 <xTaskIncrementTick+0x14c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <xTaskIncrementTick+0x48>
	__asm volatile
 800416a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	603b      	str	r3, [r7, #0]
}
 800417c:	bf00      	nop
 800417e:	e7fe      	b.n	800417e <xTaskIncrementTick+0x46>
 8004180:	4b40      	ldr	r3, [pc, #256]	; (8004284 <xTaskIncrementTick+0x14c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	4b40      	ldr	r3, [pc, #256]	; (8004288 <xTaskIncrementTick+0x150>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a3e      	ldr	r2, [pc, #248]	; (8004284 <xTaskIncrementTick+0x14c>)
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	4a3e      	ldr	r2, [pc, #248]	; (8004288 <xTaskIncrementTick+0x150>)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	4b3d      	ldr	r3, [pc, #244]	; (800428c <xTaskIncrementTick+0x154>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3301      	adds	r3, #1
 800419a:	4a3c      	ldr	r2, [pc, #240]	; (800428c <xTaskIncrementTick+0x154>)
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	f000 faab 	bl	80046f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041a2:	4b3b      	ldr	r3, [pc, #236]	; (8004290 <xTaskIncrementTick+0x158>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d348      	bcc.n	800423e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041ac:	4b35      	ldr	r3, [pc, #212]	; (8004284 <xTaskIncrementTick+0x14c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d104      	bne.n	80041c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041b6:	4b36      	ldr	r3, [pc, #216]	; (8004290 <xTaskIncrementTick+0x158>)
 80041b8:	f04f 32ff 	mov.w	r2, #4294967295
 80041bc:	601a      	str	r2, [r3, #0]
					break;
 80041be:	e03e      	b.n	800423e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041c0:	4b30      	ldr	r3, [pc, #192]	; (8004284 <xTaskIncrementTick+0x14c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d203      	bcs.n	80041e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041d8:	4a2d      	ldr	r2, [pc, #180]	; (8004290 <xTaskIncrementTick+0x158>)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041de:	e02e      	b.n	800423e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe fea5 	bl	8002f34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d004      	beq.n	80041fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	3318      	adds	r3, #24
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe fe9c 	bl	8002f34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	2201      	movs	r2, #1
 8004202:	409a      	lsls	r2, r3
 8004204:	4b23      	ldr	r3, [pc, #140]	; (8004294 <xTaskIncrementTick+0x15c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4313      	orrs	r3, r2
 800420a:	4a22      	ldr	r2, [pc, #136]	; (8004294 <xTaskIncrementTick+0x15c>)
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4a1f      	ldr	r2, [pc, #124]	; (8004298 <xTaskIncrementTick+0x160>)
 800421c:	441a      	add	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	3304      	adds	r3, #4
 8004222:	4619      	mov	r1, r3
 8004224:	4610      	mov	r0, r2
 8004226:	f7fe fe28 	bl	8002e7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422e:	4b1b      	ldr	r3, [pc, #108]	; (800429c <xTaskIncrementTick+0x164>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	429a      	cmp	r2, r3
 8004236:	d3b9      	bcc.n	80041ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004238:	2301      	movs	r3, #1
 800423a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800423c:	e7b6      	b.n	80041ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800423e:	4b17      	ldr	r3, [pc, #92]	; (800429c <xTaskIncrementTick+0x164>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004244:	4914      	ldr	r1, [pc, #80]	; (8004298 <xTaskIncrementTick+0x160>)
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d907      	bls.n	8004266 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004256:	2301      	movs	r3, #1
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	e004      	b.n	8004266 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800425c:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <xTaskIncrementTick+0x168>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3301      	adds	r3, #1
 8004262:	4a0f      	ldr	r2, [pc, #60]	; (80042a0 <xTaskIncrementTick+0x168>)
 8004264:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004266:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <xTaskIncrementTick+0x16c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800426e:	2301      	movs	r3, #1
 8004270:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004272:	697b      	ldr	r3, [r7, #20]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	20000320 	.word	0x20000320
 8004280:	200002fc 	.word	0x200002fc
 8004284:	200002b0 	.word	0x200002b0
 8004288:	200002b4 	.word	0x200002b4
 800428c:	20000310 	.word	0x20000310
 8004290:	20000318 	.word	0x20000318
 8004294:	20000300 	.word	0x20000300
 8004298:	2000015c 	.word	0x2000015c
 800429c:	20000158 	.word	0x20000158
 80042a0:	20000308 	.word	0x20000308
 80042a4:	2000030c 	.word	0x2000030c

080042a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042ae:	4b27      	ldr	r3, [pc, #156]	; (800434c <vTaskSwitchContext+0xa4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042b6:	4b26      	ldr	r3, [pc, #152]	; (8004350 <vTaskSwitchContext+0xa8>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042bc:	e03f      	b.n	800433e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80042be:	4b24      	ldr	r3, [pc, #144]	; (8004350 <vTaskSwitchContext+0xa8>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042c4:	4b23      	ldr	r3, [pc, #140]	; (8004354 <vTaskSwitchContext+0xac>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	fab3 f383 	clz	r3, r3
 80042d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80042d2:	7afb      	ldrb	r3, [r7, #11]
 80042d4:	f1c3 031f 	rsb	r3, r3, #31
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	491f      	ldr	r1, [pc, #124]	; (8004358 <vTaskSwitchContext+0xb0>)
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10a      	bne.n	8004304 <vTaskSwitchContext+0x5c>
	__asm volatile
 80042ee:	f04f 0340 	mov.w	r3, #64	; 0x40
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	607b      	str	r3, [r7, #4]
}
 8004300:	bf00      	nop
 8004302:	e7fe      	b.n	8004302 <vTaskSwitchContext+0x5a>
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4a12      	ldr	r2, [pc, #72]	; (8004358 <vTaskSwitchContext+0xb0>)
 8004310:	4413      	add	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	3308      	adds	r3, #8
 8004326:	429a      	cmp	r2, r3
 8004328:	d104      	bne.n	8004334 <vTaskSwitchContext+0x8c>
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	605a      	str	r2, [r3, #4]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	4a08      	ldr	r2, [pc, #32]	; (800435c <vTaskSwitchContext+0xb4>)
 800433c:	6013      	str	r3, [r2, #0]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20000320 	.word	0x20000320
 8004350:	2000030c 	.word	0x2000030c
 8004354:	20000300 	.word	0x20000300
 8004358:	2000015c 	.word	0x2000015c
 800435c:	20000158 	.word	0x20000158

08004360 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004370:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	60fb      	str	r3, [r7, #12]
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004386:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <vTaskPlaceOnEventList+0x44>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3318      	adds	r3, #24
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fe fd97 	bl	8002ec2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004394:	2101      	movs	r1, #1
 8004396:	6838      	ldr	r0, [r7, #0]
 8004398:	f000 fba0 	bl	8004adc <prvAddCurrentTaskToDelayedList>
}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20000158 	.word	0x20000158

080043a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80043ba:	f04f 0340 	mov.w	r3, #64	; 0x40
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	617b      	str	r3, [r7, #20]
}
 80043cc:	bf00      	nop
 80043ce:	e7fe      	b.n	80043ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043d0:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <vTaskPlaceOnEventListRestricted+0x54>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3318      	adds	r3, #24
 80043d6:	4619      	mov	r1, r3
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f7fe fd4e 	bl	8002e7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80043e4:	f04f 33ff 	mov.w	r3, #4294967295
 80043e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	68b8      	ldr	r0, [r7, #8]
 80043ee:	f000 fb75 	bl	8004adc <prvAddCurrentTaskToDelayedList>
	}
 80043f2:	bf00      	nop
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000158 	.word	0x20000158

08004400 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10a      	bne.n	800442c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004416:	f04f 0340 	mov.w	r3, #64	; 0x40
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	60fb      	str	r3, [r7, #12]
}
 8004428:	bf00      	nop
 800442a:	e7fe      	b.n	800442a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	3318      	adds	r3, #24
 8004430:	4618      	mov	r0, r3
 8004432:	f7fe fd7f 	bl	8002f34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004436:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <xTaskRemoveFromEventList+0xac>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d11c      	bne.n	8004478 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	3304      	adds	r3, #4
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe fd76 	bl	8002f34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	2201      	movs	r2, #1
 800444e:	409a      	lsls	r2, r3
 8004450:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <xTaskRemoveFromEventList+0xb0>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4313      	orrs	r3, r2
 8004456:	4a16      	ldr	r2, [pc, #88]	; (80044b0 <xTaskRemoveFromEventList+0xb0>)
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4a13      	ldr	r2, [pc, #76]	; (80044b4 <xTaskRemoveFromEventList+0xb4>)
 8004468:	441a      	add	r2, r3
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	3304      	adds	r3, #4
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f7fe fd02 	bl	8002e7a <vListInsertEnd>
 8004476:	e005      	b.n	8004484 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	3318      	adds	r3, #24
 800447c:	4619      	mov	r1, r3
 800447e:	480e      	ldr	r0, [pc, #56]	; (80044b8 <xTaskRemoveFromEventList+0xb8>)
 8004480:	f7fe fcfb 	bl	8002e7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004488:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <xTaskRemoveFromEventList+0xbc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	429a      	cmp	r2, r3
 8004490:	d905      	bls.n	800449e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004492:	2301      	movs	r3, #1
 8004494:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004496:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <xTaskRemoveFromEventList+0xc0>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	e001      	b.n	80044a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80044a2:	697b      	ldr	r3, [r7, #20]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000320 	.word	0x20000320
 80044b0:	20000300 	.word	0x20000300
 80044b4:	2000015c 	.word	0x2000015c
 80044b8:	200002b8 	.word	0x200002b8
 80044bc:	20000158 	.word	0x20000158
 80044c0:	2000030c 	.word	0x2000030c

080044c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <vTaskInternalSetTimeOutState+0x24>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <vTaskInternalSetTimeOutState+0x28>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	605a      	str	r2, [r3, #4]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	20000310 	.word	0x20000310
 80044ec:	200002fc 	.word	0x200002fc

080044f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004500:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	613b      	str	r3, [r7, #16]
}
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800451c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	60fb      	str	r3, [r7, #12]
}
 800452e:	bf00      	nop
 8004530:	e7fe      	b.n	8004530 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004532:	f000 ff87 	bl	8005444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004536:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <xTaskCheckForTimeOut+0xbc>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454e:	d102      	bne.n	8004556 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004550:	2300      	movs	r3, #0
 8004552:	61fb      	str	r3, [r7, #28]
 8004554:	e023      	b.n	800459e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <xTaskCheckForTimeOut+0xc0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d007      	beq.n	8004572 <xTaskCheckForTimeOut+0x82>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	429a      	cmp	r2, r3
 800456a:	d302      	bcc.n	8004572 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800456c:	2301      	movs	r3, #1
 800456e:	61fb      	str	r3, [r7, #28]
 8004570:	e015      	b.n	800459e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	429a      	cmp	r2, r3
 800457a:	d20b      	bcs.n	8004594 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	1ad2      	subs	r2, r2, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff ff9b 	bl	80044c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
 8004592:	e004      	b.n	800459e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800459a:	2301      	movs	r3, #1
 800459c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800459e:	f000 ff81 	bl	80054a4 <vPortExitCritical>

	return xReturn;
 80045a2:	69fb      	ldr	r3, [r7, #28]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	200002fc 	.word	0x200002fc
 80045b0:	20000310 	.word	0x20000310

080045b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045b8:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <vTaskMissedYield+0x14>)
 80045ba:	2201      	movs	r2, #1
 80045bc:	601a      	str	r2, [r3, #0]
}
 80045be:	bf00      	nop
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	2000030c 	.word	0x2000030c

080045cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045d4:	f000 f852 	bl	800467c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <prvIdleTask+0x28>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d9f9      	bls.n	80045d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <prvIdleTask+0x2c>)
 80045e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045f0:	e7f0      	b.n	80045d4 <prvIdleTask+0x8>
 80045f2:	bf00      	nop
 80045f4:	2000015c 	.word	0x2000015c
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004602:	2300      	movs	r3, #0
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	e00c      	b.n	8004622 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4a12      	ldr	r2, [pc, #72]	; (800465c <prvInitialiseTaskLists+0x60>)
 8004614:	4413      	add	r3, r2
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe fc02 	bl	8002e20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3301      	adds	r3, #1
 8004620:	607b      	str	r3, [r7, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b0e      	cmp	r3, #14
 8004626:	d9ef      	bls.n	8004608 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004628:	480d      	ldr	r0, [pc, #52]	; (8004660 <prvInitialiseTaskLists+0x64>)
 800462a:	f7fe fbf9 	bl	8002e20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800462e:	480d      	ldr	r0, [pc, #52]	; (8004664 <prvInitialiseTaskLists+0x68>)
 8004630:	f7fe fbf6 	bl	8002e20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004634:	480c      	ldr	r0, [pc, #48]	; (8004668 <prvInitialiseTaskLists+0x6c>)
 8004636:	f7fe fbf3 	bl	8002e20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800463a:	480c      	ldr	r0, [pc, #48]	; (800466c <prvInitialiseTaskLists+0x70>)
 800463c:	f7fe fbf0 	bl	8002e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004640:	480b      	ldr	r0, [pc, #44]	; (8004670 <prvInitialiseTaskLists+0x74>)
 8004642:	f7fe fbed 	bl	8002e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004646:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <prvInitialiseTaskLists+0x78>)
 8004648:	4a05      	ldr	r2, [pc, #20]	; (8004660 <prvInitialiseTaskLists+0x64>)
 800464a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <prvInitialiseTaskLists+0x7c>)
 800464e:	4a05      	ldr	r2, [pc, #20]	; (8004664 <prvInitialiseTaskLists+0x68>)
 8004650:	601a      	str	r2, [r3, #0]
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	2000015c 	.word	0x2000015c
 8004660:	20000288 	.word	0x20000288
 8004664:	2000029c 	.word	0x2000029c
 8004668:	200002b8 	.word	0x200002b8
 800466c:	200002cc 	.word	0x200002cc
 8004670:	200002e4 	.word	0x200002e4
 8004674:	200002b0 	.word	0x200002b0
 8004678:	200002b4 	.word	0x200002b4

0800467c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004682:	e019      	b.n	80046b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004684:	f000 fede 	bl	8005444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004688:	4b10      	ldr	r3, [pc, #64]	; (80046cc <prvCheckTasksWaitingTermination+0x50>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3304      	adds	r3, #4
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe fc4d 	bl	8002f34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800469a:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <prvCheckTasksWaitingTermination+0x54>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3b01      	subs	r3, #1
 80046a0:	4a0b      	ldr	r2, [pc, #44]	; (80046d0 <prvCheckTasksWaitingTermination+0x54>)
 80046a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046a4:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <prvCheckTasksWaitingTermination+0x58>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	4a0a      	ldr	r2, [pc, #40]	; (80046d4 <prvCheckTasksWaitingTermination+0x58>)
 80046ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046ae:	f000 fef9 	bl	80054a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f810 	bl	80046d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <prvCheckTasksWaitingTermination+0x58>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e1      	bne.n	8004684 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	200002cc 	.word	0x200002cc
 80046d0:	200002f8 	.word	0x200002f8
 80046d4:	200002e0 	.word	0x200002e0

080046d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	4618      	mov	r0, r3
 80046e6:	f001 f893 	bl	8005810 <vPortFree>
			vPortFree( pxTCB );
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f001 f890 	bl	8005810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <prvResetNextTaskUnblockTime+0x38>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <prvResetNextTaskUnblockTime+0x3c>)
 800470a:	f04f 32ff 	mov.w	r2, #4294967295
 800470e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004710:	e008      	b.n	8004724 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <prvResetNextTaskUnblockTime+0x38>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4a04      	ldr	r2, [pc, #16]	; (8004734 <prvResetNextTaskUnblockTime+0x3c>)
 8004722:	6013      	str	r3, [r2, #0]
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	200002b0 	.word	0x200002b0
 8004734:	20000318 	.word	0x20000318

08004738 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800473e:	4b0b      	ldr	r3, [pc, #44]	; (800476c <xTaskGetSchedulerState+0x34>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d102      	bne.n	800474c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004746:	2301      	movs	r3, #1
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	e008      	b.n	800475e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800474c:	4b08      	ldr	r3, [pc, #32]	; (8004770 <xTaskGetSchedulerState+0x38>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d102      	bne.n	800475a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004754:	2302      	movs	r3, #2
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	e001      	b.n	800475e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800475a:	2300      	movs	r3, #0
 800475c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800475e:	687b      	ldr	r3, [r7, #4]
	}
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	20000304 	.word	0x20000304
 8004770:	20000320 	.word	0x20000320

08004774 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d069      	beq.n	800485e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478e:	4b36      	ldr	r3, [pc, #216]	; (8004868 <xTaskPriorityInherit+0xf4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	429a      	cmp	r2, r3
 8004796:	d259      	bcs.n	800484c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	db06      	blt.n	80047ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047a0:	4b31      	ldr	r3, [pc, #196]	; (8004868 <xTaskPriorityInherit+0xf4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	f1c3 020f 	rsb	r2, r3, #15
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	6959      	ldr	r1, [r3, #20]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b6:	4613      	mov	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4a2b      	ldr	r2, [pc, #172]	; (800486c <xTaskPriorityInherit+0xf8>)
 80047c0:	4413      	add	r3, r2
 80047c2:	4299      	cmp	r1, r3
 80047c4:	d13a      	bne.n	800483c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	3304      	adds	r3, #4
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe fbb2 	bl	8002f34 <uxListRemove>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d115      	bne.n	8004802 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047da:	4924      	ldr	r1, [pc, #144]	; (800486c <xTaskPriorityInherit+0xf8>)
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <xTaskPriorityInherit+0x8e>
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	2201      	movs	r2, #1
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	43da      	mvns	r2, r3
 80047f8:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <xTaskPriorityInherit+0xfc>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4013      	ands	r3, r2
 80047fe:	4a1c      	ldr	r2, [pc, #112]	; (8004870 <xTaskPriorityInherit+0xfc>)
 8004800:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004802:	4b19      	ldr	r3, [pc, #100]	; (8004868 <xTaskPriorityInherit+0xf4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	2201      	movs	r2, #1
 8004812:	409a      	lsls	r2, r3
 8004814:	4b16      	ldr	r3, [pc, #88]	; (8004870 <xTaskPriorityInherit+0xfc>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4313      	orrs	r3, r2
 800481a:	4a15      	ldr	r2, [pc, #84]	; (8004870 <xTaskPriorityInherit+0xfc>)
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004822:	4613      	mov	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4a10      	ldr	r2, [pc, #64]	; (800486c <xTaskPriorityInherit+0xf8>)
 800482c:	441a      	add	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	3304      	adds	r3, #4
 8004832:	4619      	mov	r1, r3
 8004834:	4610      	mov	r0, r2
 8004836:	f7fe fb20 	bl	8002e7a <vListInsertEnd>
 800483a:	e004      	b.n	8004846 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <xTaskPriorityInherit+0xf4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004846:	2301      	movs	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	e008      	b.n	800485e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <xTaskPriorityInherit+0xf4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	429a      	cmp	r2, r3
 8004858:	d201      	bcs.n	800485e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800485a:	2301      	movs	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800485e:	68fb      	ldr	r3, [r7, #12]
	}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000158 	.word	0x20000158
 800486c:	2000015c 	.word	0x2000015c
 8004870:	20000300 	.word	0x20000300

08004874 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d06e      	beq.n	8004968 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800488a:	4b3a      	ldr	r3, [pc, #232]	; (8004974 <xTaskPriorityDisinherit+0x100>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	429a      	cmp	r2, r3
 8004892:	d00a      	beq.n	80048aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004894:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	60fb      	str	r3, [r7, #12]
}
 80048a6:	bf00      	nop
 80048a8:	e7fe      	b.n	80048a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10a      	bne.n	80048c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80048b2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	60bb      	str	r3, [r7, #8]
}
 80048c4:	bf00      	nop
 80048c6:	e7fe      	b.n	80048c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048cc:	1e5a      	subs	r2, r3, #1
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048da:	429a      	cmp	r2, r3
 80048dc:	d044      	beq.n	8004968 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d140      	bne.n	8004968 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	3304      	adds	r3, #4
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe fb22 	bl	8002f34 <uxListRemove>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d115      	bne.n	8004922 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fa:	491f      	ldr	r1, [pc, #124]	; (8004978 <xTaskPriorityDisinherit+0x104>)
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10a      	bne.n	8004922 <xTaskPriorityDisinherit+0xae>
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	2201      	movs	r2, #1
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	43da      	mvns	r2, r3
 8004918:	4b18      	ldr	r3, [pc, #96]	; (800497c <xTaskPriorityDisinherit+0x108>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4013      	ands	r3, r2
 800491e:	4a17      	ldr	r2, [pc, #92]	; (800497c <xTaskPriorityDisinherit+0x108>)
 8004920:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	f1c3 020f 	rsb	r2, r3, #15
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	2201      	movs	r2, #1
 800493c:	409a      	lsls	r2, r3
 800493e:	4b0f      	ldr	r3, [pc, #60]	; (800497c <xTaskPriorityDisinherit+0x108>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	4a0d      	ldr	r2, [pc, #52]	; (800497c <xTaskPriorityDisinherit+0x108>)
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4a08      	ldr	r2, [pc, #32]	; (8004978 <xTaskPriorityDisinherit+0x104>)
 8004956:	441a      	add	r2, r3
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	3304      	adds	r3, #4
 800495c:	4619      	mov	r1, r3
 800495e:	4610      	mov	r0, r2
 8004960:	f7fe fa8b 	bl	8002e7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004964:	2301      	movs	r3, #1
 8004966:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004968:	697b      	ldr	r3, [r7, #20]
	}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000158 	.word	0x20000158
 8004978:	2000015c 	.word	0x2000015c
 800497c:	20000300 	.word	0x20000300

08004980 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800498e:	2301      	movs	r3, #1
 8004990:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8083 	beq.w	8004aa0 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80049a2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	60fb      	str	r3, [r7, #12]
}
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d902      	bls.n	80049c8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	61fb      	str	r3, [r7, #28]
 80049c6:	e002      	b.n	80049ce <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049cc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d063      	beq.n	8004aa0 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d15e      	bne.n	8004aa0 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80049e2:	4b31      	ldr	r3, [pc, #196]	; (8004aa8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d10a      	bne.n	8004a02 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80049ec:	f04f 0340 	mov.w	r3, #64	; 0x40
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	60bb      	str	r3, [r7, #8]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	db04      	blt.n	8004a20 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f1c3 020f 	rsb	r2, r3, #15
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	6959      	ldr	r1, [r3, #20]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4a1f      	ldr	r2, [pc, #124]	; (8004aac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004a30:	4413      	add	r3, r2
 8004a32:	4299      	cmp	r1, r3
 8004a34:	d134      	bne.n	8004aa0 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe fa7a 	bl	8002f34 <uxListRemove>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d115      	bne.n	8004a72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4a:	4918      	ldr	r1, [pc, #96]	; (8004aac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	2201      	movs	r2, #1
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43da      	mvns	r2, r3
 8004a68:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	4a10      	ldr	r2, [pc, #64]	; (8004ab0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004a70:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	2201      	movs	r2, #1
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	4a0b      	ldr	r2, [pc, #44]	; (8004ab0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4a06      	ldr	r2, [pc, #24]	; (8004aac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004a92:	441a      	add	r2, r3
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f7fe f9ed 	bl	8002e7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004aa0:	bf00      	nop
 8004aa2:	3720      	adds	r7, #32
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000158 	.word	0x20000158
 8004aac:	2000015c 	.word	0x2000015c
 8004ab0:	20000300 	.word	0x20000300

08004ab4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004ab8:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d004      	beq.n	8004aca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ac6:	3201      	adds	r2, #1
 8004ac8:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8004aca:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004acc:	681b      	ldr	r3, [r3, #0]
	}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	20000158 	.word	0x20000158

08004adc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ae6:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aec:	4b28      	ldr	r3, [pc, #160]	; (8004b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3304      	adds	r3, #4
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe fa1e 	bl	8002f34 <uxListRemove>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10b      	bne.n	8004b16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004afe:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	2201      	movs	r2, #1
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43da      	mvns	r2, r3
 8004b0c:	4b21      	ldr	r3, [pc, #132]	; (8004b94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4013      	ands	r3, r2
 8004b12:	4a20      	ldr	r2, [pc, #128]	; (8004b94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1c:	d10a      	bne.n	8004b34 <prvAddCurrentTaskToDelayedList+0x58>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b24:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	481a      	ldr	r0, [pc, #104]	; (8004b98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004b2e:	f7fe f9a4 	bl	8002e7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b32:	e026      	b.n	8004b82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4413      	add	r3, r2
 8004b3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b3c:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d209      	bcs.n	8004b60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b4c:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4b0f      	ldr	r3, [pc, #60]	; (8004b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3304      	adds	r3, #4
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f7fe f9b2 	bl	8002ec2 <vListInsert>
}
 8004b5e:	e010      	b.n	8004b82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b60:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	f7fe f9a8 	bl	8002ec2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b72:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d202      	bcs.n	8004b82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b7c:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	6013      	str	r3, [r2, #0]
}
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200002fc 	.word	0x200002fc
 8004b90:	20000158 	.word	0x20000158
 8004b94:	20000300 	.word	0x20000300
 8004b98:	200002e4 	.word	0x200002e4
 8004b9c:	200002b4 	.word	0x200002b4
 8004ba0:	200002b0 	.word	0x200002b0
 8004ba4:	20000318 	.word	0x20000318

08004ba8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004bb2:	f000 fad5 	bl	8005160 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004bb6:	4b11      	ldr	r3, [pc, #68]	; (8004bfc <xTimerCreateTimerTask+0x54>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004bbe:	4b10      	ldr	r3, [pc, #64]	; (8004c00 <xTimerCreateTimerTask+0x58>)
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004bcc:	490d      	ldr	r1, [pc, #52]	; (8004c04 <xTimerCreateTimerTask+0x5c>)
 8004bce:	480e      	ldr	r0, [pc, #56]	; (8004c08 <xTimerCreateTimerTask+0x60>)
 8004bd0:	f7ff f838 	bl	8003c44 <xTaskCreate>
 8004bd4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10a      	bne.n	8004bf2 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8004bdc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	603b      	str	r3, [r7, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8004bf2:	687b      	ldr	r3, [r7, #4]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000354 	.word	0x20000354
 8004c00:	20000358 	.word	0x20000358
 8004c04:	08005b84 	.word	0x08005b84
 8004c08:	08004d41 	.word	0x08004d41

08004c0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	; 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004c24:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	623b      	str	r3, [r7, #32]
}
 8004c36:	bf00      	nop
 8004c38:	e7fe      	b.n	8004c38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <xTimerGenericCommand+0x98>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d02a      	beq.n	8004c98 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b05      	cmp	r3, #5
 8004c52:	dc18      	bgt.n	8004c86 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c54:	f7ff fd70 	bl	8004738 <xTaskGetSchedulerState>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d109      	bne.n	8004c72 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c5e:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <xTimerGenericCommand+0x98>)
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	f107 0114 	add.w	r1, r7, #20
 8004c66:	2300      	movs	r3, #0
 8004c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c6a:	f7fe fa55 	bl	8003118 <xQueueGenericSend>
 8004c6e:	6278      	str	r0, [r7, #36]	; 0x24
 8004c70:	e012      	b.n	8004c98 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c72:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <xTimerGenericCommand+0x98>)
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	f107 0114 	add.w	r1, r7, #20
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f7fe fa4b 	bl	8003118 <xQueueGenericSend>
 8004c82:	6278      	str	r0, [r7, #36]	; 0x24
 8004c84:	e008      	b.n	8004c98 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c86:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <xTimerGenericCommand+0x98>)
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	f107 0114 	add.w	r1, r7, #20
 8004c8e:	2300      	movs	r3, #0
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	f7fe fb3f 	bl	8003314 <xQueueGenericSendFromISR>
 8004c96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3728      	adds	r7, #40	; 0x28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000354 	.word	0x20000354

08004ca8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cb2:	4b22      	ldr	r3, [pc, #136]	; (8004d3c <prvProcessExpiredTimer+0x94>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fe f937 	bl	8002f34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d022      	beq.n	8004d1a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	699a      	ldr	r2, [r3, #24]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	18d1      	adds	r1, r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	6978      	ldr	r0, [r7, #20]
 8004ce2:	f000 f8d1 	bl	8004e88 <prvInsertTimerInActiveList>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01f      	beq.n	8004d2c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cec:	2300      	movs	r3, #0
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	6978      	ldr	r0, [r7, #20]
 8004cf8:	f7ff ff88 	bl	8004c0c <xTimerGenericCommand>
 8004cfc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d113      	bne.n	8004d2c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004d04:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	60fb      	str	r3, [r7, #12]
}
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	6978      	ldr	r0, [r7, #20]
 8004d32:	4798      	blx	r3
}
 8004d34:	bf00      	nop
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	2000034c 	.word	0x2000034c

08004d40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d48:	f107 0308 	add.w	r3, r7, #8
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 f857 	bl	8004e00 <prvGetNextExpireTime>
 8004d52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4619      	mov	r1, r3
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f803 	bl	8004d64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d5e:	f000 f8d5 	bl	8004f0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d62:	e7f1      	b.n	8004d48 <prvTimerTask+0x8>

08004d64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d6e:	f7ff f929 	bl	8003fc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d72:	f107 0308 	add.w	r3, r7, #8
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 f866 	bl	8004e48 <prvSampleTimeNow>
 8004d7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d130      	bne.n	8004de6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10a      	bne.n	8004da0 <prvProcessTimerOrBlockTask+0x3c>
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d806      	bhi.n	8004da0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d92:	f7ff f925 	bl	8003fe0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d96:	68f9      	ldr	r1, [r7, #12]
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff ff85 	bl	8004ca8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d9e:	e024      	b.n	8004dea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d008      	beq.n	8004db8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004da6:	4b13      	ldr	r3, [pc, #76]	; (8004df4 <prvProcessTimerOrBlockTask+0x90>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <prvProcessTimerOrBlockTask+0x50>
 8004db0:	2301      	movs	r3, #1
 8004db2:	e000      	b.n	8004db6 <prvProcessTimerOrBlockTask+0x52>
 8004db4:	2300      	movs	r3, #0
 8004db6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004db8:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <prvProcessTimerOrBlockTask+0x94>)
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	f7fe ff09 	bl	8003bdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004dca:	f7ff f909 	bl	8003fe0 <xTaskResumeAll>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10a      	bne.n	8004dea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004dd4:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <prvProcessTimerOrBlockTask+0x98>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
}
 8004de4:	e001      	b.n	8004dea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004de6:	f7ff f8fb 	bl	8003fe0 <xTaskResumeAll>
}
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000350 	.word	0x20000350
 8004df8:	20000354 	.word	0x20000354
 8004dfc:	e000ed04 	.word	0xe000ed04

08004e00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e08:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <prvGetNextExpireTime+0x44>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <prvGetNextExpireTime+0x16>
 8004e12:	2201      	movs	r2, #1
 8004e14:	e000      	b.n	8004e18 <prvGetNextExpireTime+0x18>
 8004e16:	2200      	movs	r2, #0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d105      	bne.n	8004e30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e24:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <prvGetNextExpireTime+0x44>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e001      	b.n	8004e34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e34:	68fb      	ldr	r3, [r7, #12]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	2000034c 	.word	0x2000034c

08004e48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e50:	f7ff f962 	bl	8004118 <xTaskGetTickCount>
 8004e54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e56:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <prvSampleTimeNow+0x3c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d205      	bcs.n	8004e6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e60:	f000 f91a 	bl	8005098 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	e002      	b.n	8004e72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e72:	4a04      	ldr	r2, [pc, #16]	; (8004e84 <prvSampleTimeNow+0x3c>)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e78:	68fb      	ldr	r3, [r7, #12]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	2000035c 	.word	0x2000035c

08004e88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e96:	2300      	movs	r3, #0
 8004e98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d812      	bhi.n	8004ed4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	1ad2      	subs	r2, r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d302      	bcc.n	8004ec2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e01b      	b.n	8004efa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ec2:	4b10      	ldr	r3, [pc, #64]	; (8004f04 <prvInsertTimerInActiveList+0x7c>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f7fd fff8 	bl	8002ec2 <vListInsert>
 8004ed2:	e012      	b.n	8004efa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d206      	bcs.n	8004eea <prvInsertTimerInActiveList+0x62>
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d302      	bcc.n	8004eea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	e007      	b.n	8004efa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004eea:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <prvInsertTimerInActiveList+0x80>)
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	f7fd ffe4 	bl	8002ec2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004efa:	697b      	ldr	r3, [r7, #20]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20000350 	.word	0x20000350
 8004f08:	2000034c 	.word	0x2000034c

08004f0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08c      	sub	sp, #48	; 0x30
 8004f10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f12:	e0ae      	b.n	8005072 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f2c0 80aa 	blt.w	8005070 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d004      	beq.n	8004f32 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fe f801 	bl	8002f34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f32:	1d3b      	adds	r3, r7, #4
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff ff87 	bl	8004e48 <prvSampleTimeNow>
 8004f3a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b09      	cmp	r3, #9
 8004f40:	f200 8097 	bhi.w	8005072 <prvProcessReceivedCommands+0x166>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <prvProcessReceivedCommands+0x40>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004f75 	.word	0x08004f75
 8004f50:	08004f75 	.word	0x08004f75
 8004f54:	08004f75 	.word	0x08004f75
 8004f58:	08004fe9 	.word	0x08004fe9
 8004f5c:	08004ffd 	.word	0x08004ffd
 8004f60:	08005047 	.word	0x08005047
 8004f64:	08004f75 	.word	0x08004f75
 8004f68:	08004f75 	.word	0x08004f75
 8004f6c:	08004fe9 	.word	0x08004fe9
 8004f70:	08004ffd 	.word	0x08004ffd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	18d1      	adds	r1, r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a3a      	ldr	r2, [r7, #32]
 8004f92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f94:	f7ff ff78 	bl	8004e88 <prvInsertTimerInActiveList>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d069      	beq.n	8005072 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fa4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d05e      	beq.n	8005072 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	441a      	add	r2, r3
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fc6:	f7ff fe21 	bl	8004c0c <xTimerGenericCommand>
 8004fca:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d14f      	bne.n	8005072 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004fd2:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	61bb      	str	r3, [r7, #24]
}
 8004fe4:	bf00      	nop
 8004fe6:	e7fe      	b.n	8004fe6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fee:	f023 0301 	bic.w	r3, r3, #1
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004ffa:	e03a      	b.n	8005072 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005002:	f043 0301 	orr.w	r3, r3, #1
 8005006:	b2da      	uxtb	r2, r3
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10a      	bne.n	8005032 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800501c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	617b      	str	r3, [r7, #20]
}
 800502e:	bf00      	nop
 8005030:	e7fe      	b.n	8005030 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	18d1      	adds	r1, r2, r3
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	6a3a      	ldr	r2, [r7, #32]
 800503e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005040:	f7ff ff22 	bl	8004e88 <prvInsertTimerInActiveList>
					break;
 8005044:	e015      	b.n	8005072 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d103      	bne.n	800505c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8005054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005056:	f000 fbdb 	bl	8005810 <vPortFree>
 800505a:	e00a      	b.n	8005072 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005062:	f023 0301 	bic.w	r3, r3, #1
 8005066:	b2da      	uxtb	r2, r3
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800506e:	e000      	b.n	8005072 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005070:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005072:	4b08      	ldr	r3, [pc, #32]	; (8005094 <prvProcessReceivedCommands+0x188>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f107 0108 	add.w	r1, r7, #8
 800507a:	2200      	movs	r2, #0
 800507c:	4618      	mov	r0, r3
 800507e:	f7fe fa6f 	bl	8003560 <xQueueReceive>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	f47f af45 	bne.w	8004f14 <prvProcessReceivedCommands+0x8>
	}
}
 800508a:	bf00      	nop
 800508c:	bf00      	nop
 800508e:	3728      	adds	r7, #40	; 0x28
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	20000354 	.word	0x20000354

08005098 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800509e:	e048      	b.n	8005132 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050a0:	4b2d      	ldr	r3, [pc, #180]	; (8005158 <prvSwitchTimerLists+0xc0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050aa:	4b2b      	ldr	r3, [pc, #172]	; (8005158 <prvSwitchTimerLists+0xc0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fd ff3b 	bl	8002f34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d02e      	beq.n	8005132 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4413      	add	r3, r2
 80050dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d90e      	bls.n	8005104 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050f2:	4b19      	ldr	r3, [pc, #100]	; (8005158 <prvSwitchTimerLists+0xc0>)
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3304      	adds	r3, #4
 80050fa:	4619      	mov	r1, r3
 80050fc:	4610      	mov	r0, r2
 80050fe:	f7fd fee0 	bl	8002ec2 <vListInsert>
 8005102:	e016      	b.n	8005132 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005104:	2300      	movs	r3, #0
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	2300      	movs	r3, #0
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	2100      	movs	r1, #0
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fd7c 	bl	8004c0c <xTimerGenericCommand>
 8005114:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800511c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	603b      	str	r3, [r7, #0]
}
 800512e:	bf00      	nop
 8005130:	e7fe      	b.n	8005130 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005132:	4b09      	ldr	r3, [pc, #36]	; (8005158 <prvSwitchTimerLists+0xc0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1b1      	bne.n	80050a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <prvSwitchTimerLists+0xc0>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <prvSwitchTimerLists+0xc4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a04      	ldr	r2, [pc, #16]	; (8005158 <prvSwitchTimerLists+0xc0>)
 8005148:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800514a:	4a04      	ldr	r2, [pc, #16]	; (800515c <prvSwitchTimerLists+0xc4>)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	6013      	str	r3, [r2, #0]
}
 8005150:	bf00      	nop
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	2000034c 	.word	0x2000034c
 800515c:	20000350 	.word	0x20000350

08005160 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005164:	f000 f96e 	bl	8005444 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005168:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <prvCheckForValidListAndQueue+0x54>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d11d      	bne.n	80051ac <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005170:	4811      	ldr	r0, [pc, #68]	; (80051b8 <prvCheckForValidListAndQueue+0x58>)
 8005172:	f7fd fe55 	bl	8002e20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005176:	4811      	ldr	r0, [pc, #68]	; (80051bc <prvCheckForValidListAndQueue+0x5c>)
 8005178:	f7fd fe52 	bl	8002e20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800517c:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 800517e:	4a0e      	ldr	r2, [pc, #56]	; (80051b8 <prvCheckForValidListAndQueue+0x58>)
 8005180:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005182:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <prvCheckForValidListAndQueue+0x64>)
 8005184:	4a0d      	ldr	r2, [pc, #52]	; (80051bc <prvCheckForValidListAndQueue+0x5c>)
 8005186:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005188:	2200      	movs	r2, #0
 800518a:	210c      	movs	r1, #12
 800518c:	200a      	movs	r0, #10
 800518e:	f7fd ff63 	bl	8003058 <xQueueGenericCreate>
 8005192:	4603      	mov	r3, r0
 8005194:	4a07      	ldr	r2, [pc, #28]	; (80051b4 <prvCheckForValidListAndQueue+0x54>)
 8005196:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <prvCheckForValidListAndQueue+0x54>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051a0:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <prvCheckForValidListAndQueue+0x54>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4908      	ldr	r1, [pc, #32]	; (80051c8 <prvCheckForValidListAndQueue+0x68>)
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe fcee 	bl	8003b88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051ac:	f000 f97a 	bl	80054a4 <vPortExitCritical>
}
 80051b0:	bf00      	nop
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000354 	.word	0x20000354
 80051b8:	20000324 	.word	0x20000324
 80051bc:	20000338 	.word	0x20000338
 80051c0:	2000034c 	.word	0x2000034c
 80051c4:	20000350 	.word	0x20000350
 80051c8:	08005b8c 	.word	0x08005b8c

080051cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3b04      	subs	r3, #4
 80051dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3b04      	subs	r3, #4
 80051ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f023 0201 	bic.w	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3b04      	subs	r3, #4
 80051fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051fc:	4a0c      	ldr	r2, [pc, #48]	; (8005230 <pxPortInitialiseStack+0x64>)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3b14      	subs	r3, #20
 8005206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3b04      	subs	r3, #4
 8005212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f06f 0202 	mvn.w	r2, #2
 800521a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3b20      	subs	r3, #32
 8005220:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005222:	68fb      	ldr	r3, [r7, #12]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	08005235 	.word	0x08005235

08005234 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <prvTaskExitError+0x54>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005246:	d00a      	beq.n	800525e <prvTaskExitError+0x2a>
	__asm volatile
 8005248:	f04f 0340 	mov.w	r3, #64	; 0x40
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	60fb      	str	r3, [r7, #12]
}
 800525a:	bf00      	nop
 800525c:	e7fe      	b.n	800525c <prvTaskExitError+0x28>
	__asm volatile
 800525e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	60bb      	str	r3, [r7, #8]
}
 8005270:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005272:	bf00      	nop
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0fc      	beq.n	8005274 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	2000000c 	.word	0x2000000c
 800528c:	00000000 	.word	0x00000000

08005290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005290:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <pxCurrentTCBConst2>)
 8005292:	6819      	ldr	r1, [r3, #0]
 8005294:	6808      	ldr	r0, [r1, #0]
 8005296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529a:	f380 8809 	msr	PSP, r0
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f04f 0000 	mov.w	r0, #0
 80052a6:	f380 8811 	msr	BASEPRI, r0
 80052aa:	4770      	bx	lr
 80052ac:	f3af 8000 	nop.w

080052b0 <pxCurrentTCBConst2>:
 80052b0:	20000158 	.word	0x20000158
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop

080052b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052b8:	4808      	ldr	r0, [pc, #32]	; (80052dc <prvPortStartFirstTask+0x24>)
 80052ba:	6800      	ldr	r0, [r0, #0]
 80052bc:	6800      	ldr	r0, [r0, #0]
 80052be:	f380 8808 	msr	MSP, r0
 80052c2:	f04f 0000 	mov.w	r0, #0
 80052c6:	f380 8814 	msr	CONTROL, r0
 80052ca:	b662      	cpsie	i
 80052cc:	b661      	cpsie	f
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	df00      	svc	0
 80052d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052da:	bf00      	nop
 80052dc:	e000ed08 	.word	0xe000ed08

080052e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052e6:	4b4e      	ldr	r3, [pc, #312]	; (8005420 <xPortStartScheduler+0x140>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a4e      	ldr	r2, [pc, #312]	; (8005424 <xPortStartScheduler+0x144>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d10a      	bne.n	8005306 <xPortStartScheduler+0x26>
	__asm volatile
 80052f0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	61bb      	str	r3, [r7, #24]
}
 8005302:	bf00      	nop
 8005304:	e7fe      	b.n	8005304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005306:	4b46      	ldr	r3, [pc, #280]	; (8005420 <xPortStartScheduler+0x140>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a47      	ldr	r2, [pc, #284]	; (8005428 <xPortStartScheduler+0x148>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d10a      	bne.n	8005326 <xPortStartScheduler+0x46>
	__asm volatile
 8005310:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	617b      	str	r3, [r7, #20]
}
 8005322:	bf00      	nop
 8005324:	e7fe      	b.n	8005324 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005326:	4b41      	ldr	r3, [pc, #260]	; (800542c <xPortStartScheduler+0x14c>)
 8005328:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	b2db      	uxtb	r3, r3
 8005330:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	22ff      	movs	r2, #255	; 0xff
 8005336:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005340:	79fb      	ldrb	r3, [r7, #7]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005348:	b2da      	uxtb	r2, r3
 800534a:	4b39      	ldr	r3, [pc, #228]	; (8005430 <xPortStartScheduler+0x150>)
 800534c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800534e:	4b39      	ldr	r3, [pc, #228]	; (8005434 <xPortStartScheduler+0x154>)
 8005350:	2207      	movs	r2, #7
 8005352:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005354:	e009      	b.n	800536a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005356:	4b37      	ldr	r3, [pc, #220]	; (8005434 <xPortStartScheduler+0x154>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3b01      	subs	r3, #1
 800535c:	4a35      	ldr	r2, [pc, #212]	; (8005434 <xPortStartScheduler+0x154>)
 800535e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	b2db      	uxtb	r3, r3
 8005368:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800536a:	79fb      	ldrb	r3, [r7, #7]
 800536c:	b2db      	uxtb	r3, r3
 800536e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005372:	2b80      	cmp	r3, #128	; 0x80
 8005374:	d0ef      	beq.n	8005356 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8005376:	4b2f      	ldr	r3, [pc, #188]	; (8005434 <xPortStartScheduler+0x154>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f1c3 0307 	rsb	r3, r3, #7
 800537e:	2b04      	cmp	r3, #4
 8005380:	d00a      	beq.n	8005398 <xPortStartScheduler+0xb8>
	__asm volatile
 8005382:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	613b      	str	r3, [r7, #16]
}
 8005394:	bf00      	nop
 8005396:	e7fe      	b.n	8005396 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005398:	4b26      	ldr	r3, [pc, #152]	; (8005434 <xPortStartScheduler+0x154>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f1c3 0307 	rsb	r3, r3, #7
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d00a      	beq.n	80053ba <xPortStartScheduler+0xda>
	__asm volatile
 80053a4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	60fb      	str	r3, [r7, #12]
}
 80053b6:	bf00      	nop
 80053b8:	e7fe      	b.n	80053b8 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053ba:	4b1e      	ldr	r3, [pc, #120]	; (8005434 <xPortStartScheduler+0x154>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	4a1c      	ldr	r2, [pc, #112]	; (8005434 <xPortStartScheduler+0x154>)
 80053c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053c4:	4b1b      	ldr	r3, [pc, #108]	; (8005434 <xPortStartScheduler+0x154>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053cc:	4a19      	ldr	r2, [pc, #100]	; (8005434 <xPortStartScheduler+0x154>)
 80053ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053d8:	4b17      	ldr	r3, [pc, #92]	; (8005438 <xPortStartScheduler+0x158>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a16      	ldr	r2, [pc, #88]	; (8005438 <xPortStartScheduler+0x158>)
 80053de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053e4:	4b14      	ldr	r3, [pc, #80]	; (8005438 <xPortStartScheduler+0x158>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a13      	ldr	r2, [pc, #76]	; (8005438 <xPortStartScheduler+0x158>)
 80053ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053f0:	f000 f8dc 	bl	80055ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053f4:	4b11      	ldr	r3, [pc, #68]	; (800543c <xPortStartScheduler+0x15c>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053fa:	f000 f8fb 	bl	80055f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053fe:	4b10      	ldr	r3, [pc, #64]	; (8005440 <xPortStartScheduler+0x160>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a0f      	ldr	r2, [pc, #60]	; (8005440 <xPortStartScheduler+0x160>)
 8005404:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005408:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800540a:	f7ff ff55 	bl	80052b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800540e:	f7fe ff4b 	bl	80042a8 <vTaskSwitchContext>
	prvTaskExitError();
 8005412:	f7ff ff0f 	bl	8005234 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3720      	adds	r7, #32
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	e000ed00 	.word	0xe000ed00
 8005424:	410fc271 	.word	0x410fc271
 8005428:	410fc270 	.word	0x410fc270
 800542c:	e000e400 	.word	0xe000e400
 8005430:	20000360 	.word	0x20000360
 8005434:	20000364 	.word	0x20000364
 8005438:	e000ed20 	.word	0xe000ed20
 800543c:	2000000c 	.word	0x2000000c
 8005440:	e000ef34 	.word	0xe000ef34

08005444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
	__asm volatile
 800544a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	607b      	str	r3, [r7, #4]
}
 800545c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800545e:	4b0f      	ldr	r3, [pc, #60]	; (800549c <vPortEnterCritical+0x58>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3301      	adds	r3, #1
 8005464:	4a0d      	ldr	r2, [pc, #52]	; (800549c <vPortEnterCritical+0x58>)
 8005466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005468:	4b0c      	ldr	r3, [pc, #48]	; (800549c <vPortEnterCritical+0x58>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d10f      	bne.n	8005490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <vPortEnterCritical+0x5c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <vPortEnterCritical+0x4c>
	__asm volatile
 800547a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	603b      	str	r3, [r7, #0]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <vPortEnterCritical+0x4a>
	}
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	2000000c 	.word	0x2000000c
 80054a0:	e000ed04 	.word	0xe000ed04

080054a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054aa:	4b12      	ldr	r3, [pc, #72]	; (80054f4 <vPortExitCritical+0x50>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <vPortExitCritical+0x24>
	__asm volatile
 80054b2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	607b      	str	r3, [r7, #4]
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <vPortExitCritical+0x50>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	4a09      	ldr	r2, [pc, #36]	; (80054f4 <vPortExitCritical+0x50>)
 80054d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054d2:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <vPortExitCritical+0x50>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d105      	bne.n	80054e6 <vPortExitCritical+0x42>
 80054da:	2300      	movs	r3, #0
 80054dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	f383 8811 	msr	BASEPRI, r3
}
 80054e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	2000000c 	.word	0x2000000c
	...

08005500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005500:	f3ef 8009 	mrs	r0, PSP
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	4b15      	ldr	r3, [pc, #84]	; (8005560 <pxCurrentTCBConst>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	f01e 0f10 	tst.w	lr, #16
 8005510:	bf08      	it	eq
 8005512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551a:	6010      	str	r0, [r2, #0]
 800551c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005520:	f04f 0040 	mov.w	r0, #64	; 0x40
 8005524:	f380 8811 	msr	BASEPRI, r0
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f7fe feba 	bl	80042a8 <vTaskSwitchContext>
 8005534:	f04f 0000 	mov.w	r0, #0
 8005538:	f380 8811 	msr	BASEPRI, r0
 800553c:	bc09      	pop	{r0, r3}
 800553e:	6819      	ldr	r1, [r3, #0]
 8005540:	6808      	ldr	r0, [r1, #0]
 8005542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005546:	f01e 0f10 	tst.w	lr, #16
 800554a:	bf08      	it	eq
 800554c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005550:	f380 8809 	msr	PSP, r0
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	f3af 8000 	nop.w

08005560 <pxCurrentTCBConst>:
 8005560:	20000158 	.word	0x20000158
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop

08005568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
	__asm volatile
 800556e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	607b      	str	r3, [r7, #4]
}
 8005580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005582:	f7fe fdd9 	bl	8004138 <xTaskIncrementTick>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <SysTick_Handler+0x40>)
 800558e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	2300      	movs	r3, #0
 8005596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	f383 8811 	msr	BASEPRI, r3
}
 800559e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055a0:	bf00      	nop
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	e000ed04 	.word	0xe000ed04

080055ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <vPortSetupTimerInterrupt+0x34>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055b6:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <vPortSetupTimerInterrupt+0x38>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055bc:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <vPortSetupTimerInterrupt+0x3c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a0a      	ldr	r2, [pc, #40]	; (80055ec <vPortSetupTimerInterrupt+0x40>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	099b      	lsrs	r3, r3, #6
 80055c8:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <vPortSetupTimerInterrupt+0x44>)
 80055ca:	3b01      	subs	r3, #1
 80055cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055ce:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <vPortSetupTimerInterrupt+0x34>)
 80055d0:	2207      	movs	r2, #7
 80055d2:	601a      	str	r2, [r3, #0]
}
 80055d4:	bf00      	nop
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	e000e010 	.word	0xe000e010
 80055e4:	e000e018 	.word	0xe000e018
 80055e8:	20000000 	.word	0x20000000
 80055ec:	10624dd3 	.word	0x10624dd3
 80055f0:	e000e014 	.word	0xe000e014

080055f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005604 <vPortEnableVFP+0x10>
 80055f8:	6801      	ldr	r1, [r0, #0]
 80055fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80055fe:	6001      	str	r1, [r0, #0]
 8005600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005602:	bf00      	nop
 8005604:	e000ed88 	.word	0xe000ed88

08005608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800560e:	f3ef 8305 	mrs	r3, IPSR
 8005612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b0f      	cmp	r3, #15
 8005618:	d914      	bls.n	8005644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800561a:	4a17      	ldr	r2, [pc, #92]	; (8005678 <vPortValidateInterruptPriority+0x70>)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005624:	4b15      	ldr	r3, [pc, #84]	; (800567c <vPortValidateInterruptPriority+0x74>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	7afa      	ldrb	r2, [r7, #11]
 800562a:	429a      	cmp	r2, r3
 800562c:	d20a      	bcs.n	8005644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800562e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	607b      	str	r3, [r7, #4]
}
 8005640:	bf00      	nop
 8005642:	e7fe      	b.n	8005642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005644:	4b0e      	ldr	r3, [pc, #56]	; (8005680 <vPortValidateInterruptPriority+0x78>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800564c:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <vPortValidateInterruptPriority+0x7c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d90a      	bls.n	800566a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005654:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	603b      	str	r3, [r7, #0]
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <vPortValidateInterruptPriority+0x60>
	}
 800566a:	bf00      	nop
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	e000e3f0 	.word	0xe000e3f0
 800567c:	20000360 	.word	0x20000360
 8005680:	e000ed0c 	.word	0xe000ed0c
 8005684:	20000364 	.word	0x20000364

08005688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08a      	sub	sp, #40	; 0x28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005690:	2300      	movs	r3, #0
 8005692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005694:	f7fe fc96 	bl	8003fc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005698:	4b58      	ldr	r3, [pc, #352]	; (80057fc <pvPortMalloc+0x174>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056a0:	f000 f910 	bl	80058c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056a4:	4b56      	ldr	r3, [pc, #344]	; (8005800 <pvPortMalloc+0x178>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f040 808e 	bne.w	80057ce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d01d      	beq.n	80056f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80056b8:	2208      	movs	r2, #8
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4413      	add	r3, r2
 80056be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d014      	beq.n	80056f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f023 0307 	bic.w	r3, r3, #7
 80056d0:	3308      	adds	r3, #8
 80056d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <pvPortMalloc+0x6c>
	__asm volatile
 80056de:	f04f 0340 	mov.w	r3, #64	; 0x40
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	617b      	str	r3, [r7, #20]
}
 80056f0:	bf00      	nop
 80056f2:	e7fe      	b.n	80056f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d069      	beq.n	80057ce <pvPortMalloc+0x146>
 80056fa:	4b42      	ldr	r3, [pc, #264]	; (8005804 <pvPortMalloc+0x17c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	d864      	bhi.n	80057ce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005704:	4b40      	ldr	r3, [pc, #256]	; (8005808 <pvPortMalloc+0x180>)
 8005706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005708:	4b3f      	ldr	r3, [pc, #252]	; (8005808 <pvPortMalloc+0x180>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800570e:	e004      	b.n	800571a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d903      	bls.n	800572c <pvPortMalloc+0xa4>
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f1      	bne.n	8005710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800572c:	4b33      	ldr	r3, [pc, #204]	; (80057fc <pvPortMalloc+0x174>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005732:	429a      	cmp	r2, r3
 8005734:	d04b      	beq.n	80057ce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2208      	movs	r2, #8
 800573c:	4413      	add	r3, r2
 800573e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	1ad2      	subs	r2, r2, r3
 8005750:	2308      	movs	r3, #8
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	429a      	cmp	r2, r3
 8005756:	d91f      	bls.n	8005798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4413      	add	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <pvPortMalloc+0xf8>
	__asm volatile
 800576a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	613b      	str	r3, [r7, #16]
}
 800577c:	bf00      	nop
 800577e:	e7fe      	b.n	800577e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	1ad2      	subs	r2, r2, r3
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005792:	69b8      	ldr	r0, [r7, #24]
 8005794:	f000 f8f8 	bl	8005988 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005798:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <pvPortMalloc+0x17c>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	4a18      	ldr	r2, [pc, #96]	; (8005804 <pvPortMalloc+0x17c>)
 80057a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057a6:	4b17      	ldr	r3, [pc, #92]	; (8005804 <pvPortMalloc+0x17c>)
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4b18      	ldr	r3, [pc, #96]	; (800580c <pvPortMalloc+0x184>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d203      	bcs.n	80057ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057b2:	4b14      	ldr	r3, [pc, #80]	; (8005804 <pvPortMalloc+0x17c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a15      	ldr	r2, [pc, #84]	; (800580c <pvPortMalloc+0x184>)
 80057b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	4b10      	ldr	r3, [pc, #64]	; (8005800 <pvPortMalloc+0x178>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057ce:	f7fe fc07 	bl	8003fe0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <pvPortMalloc+0x16a>
	__asm volatile
 80057dc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	60fb      	str	r3, [r7, #12]
}
 80057ee:	bf00      	nop
 80057f0:	e7fe      	b.n	80057f0 <pvPortMalloc+0x168>
	return pvReturn;
 80057f2:	69fb      	ldr	r3, [r7, #28]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3728      	adds	r7, #40	; 0x28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20012f70 	.word	0x20012f70
 8005800:	20012f7c 	.word	0x20012f7c
 8005804:	20012f74 	.word	0x20012f74
 8005808:	20012f68 	.word	0x20012f68
 800580c:	20012f78 	.word	0x20012f78

08005810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d048      	beq.n	80058b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005822:	2308      	movs	r3, #8
 8005824:	425b      	negs	r3, r3
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4413      	add	r3, r2
 800582a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	4b21      	ldr	r3, [pc, #132]	; (80058bc <vPortFree+0xac>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4013      	ands	r3, r2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10a      	bne.n	8005854 <vPortFree+0x44>
	__asm volatile
 800583e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	60fb      	str	r3, [r7, #12]
}
 8005850:	bf00      	nop
 8005852:	e7fe      	b.n	8005852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <vPortFree+0x62>
	__asm volatile
 800585c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	60bb      	str	r3, [r7, #8]
}
 800586e:	bf00      	nop
 8005870:	e7fe      	b.n	8005870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	4b11      	ldr	r3, [pc, #68]	; (80058bc <vPortFree+0xac>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4013      	ands	r3, r2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d019      	beq.n	80058b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d115      	bne.n	80058b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <vPortFree+0xac>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	43db      	mvns	r3, r3
 8005892:	401a      	ands	r2, r3
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005898:	f7fe fb94 	bl	8003fc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <vPortFree+0xb0>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4413      	add	r3, r2
 80058a6:	4a06      	ldr	r2, [pc, #24]	; (80058c0 <vPortFree+0xb0>)
 80058a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058aa:	6938      	ldr	r0, [r7, #16]
 80058ac:	f000 f86c 	bl	8005988 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80058b0:	f7fe fb96 	bl	8003fe0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058b4:	bf00      	nop
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	20012f7c 	.word	0x20012f7c
 80058c0:	20012f74 	.word	0x20012f74

080058c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058ca:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80058ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058d0:	4b27      	ldr	r3, [pc, #156]	; (8005970 <prvHeapInit+0xac>)
 80058d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00c      	beq.n	80058f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3307      	adds	r3, #7
 80058e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0307 	bic.w	r3, r3, #7
 80058ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	4a1f      	ldr	r2, [pc, #124]	; (8005970 <prvHeapInit+0xac>)
 80058f4:	4413      	add	r3, r2
 80058f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058fc:	4a1d      	ldr	r2, [pc, #116]	; (8005974 <prvHeapInit+0xb0>)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005902:	4b1c      	ldr	r3, [pc, #112]	; (8005974 <prvHeapInit+0xb0>)
 8005904:	2200      	movs	r2, #0
 8005906:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	4413      	add	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005910:	2208      	movs	r2, #8
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	1a9b      	subs	r3, r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0307 	bic.w	r3, r3, #7
 800591e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4a15      	ldr	r2, [pc, #84]	; (8005978 <prvHeapInit+0xb4>)
 8005924:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005926:	4b14      	ldr	r3, [pc, #80]	; (8005978 <prvHeapInit+0xb4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2200      	movs	r2, #0
 800592c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800592e:	4b12      	ldr	r3, [pc, #72]	; (8005978 <prvHeapInit+0xb4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	1ad2      	subs	r2, r2, r3
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005944:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <prvHeapInit+0xb4>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	4a0a      	ldr	r2, [pc, #40]	; (800597c <prvHeapInit+0xb8>)
 8005952:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	4a09      	ldr	r2, [pc, #36]	; (8005980 <prvHeapInit+0xbc>)
 800595a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800595c:	4b09      	ldr	r3, [pc, #36]	; (8005984 <prvHeapInit+0xc0>)
 800595e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005962:	601a      	str	r2, [r3, #0]
}
 8005964:	bf00      	nop
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	20000368 	.word	0x20000368
 8005974:	20012f68 	.word	0x20012f68
 8005978:	20012f70 	.word	0x20012f70
 800597c:	20012f78 	.word	0x20012f78
 8005980:	20012f74 	.word	0x20012f74
 8005984:	20012f7c 	.word	0x20012f7c

08005988 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005990:	4b28      	ldr	r3, [pc, #160]	; (8005a34 <prvInsertBlockIntoFreeList+0xac>)
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	e002      	b.n	800599c <prvInsertBlockIntoFreeList+0x14>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d8f7      	bhi.n	8005996 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	4413      	add	r3, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d108      	bne.n	80059ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	441a      	add	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	441a      	add	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d118      	bne.n	8005a10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <prvInsertBlockIntoFreeList+0xb0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d00d      	beq.n	8005a06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	441a      	add	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	e008      	b.n	8005a18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a06:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <prvInsertBlockIntoFreeList+0xb0>)
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	e003      	b.n	8005a18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d002      	beq.n	8005a26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a26:	bf00      	nop
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	20012f68 	.word	0x20012f68
 8005a38:	20012f70 	.word	0x20012f70

08005a3c <__libc_init_array>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	4d0d      	ldr	r5, [pc, #52]	; (8005a74 <__libc_init_array+0x38>)
 8005a40:	4c0d      	ldr	r4, [pc, #52]	; (8005a78 <__libc_init_array+0x3c>)
 8005a42:	1b64      	subs	r4, r4, r5
 8005a44:	10a4      	asrs	r4, r4, #2
 8005a46:	2600      	movs	r6, #0
 8005a48:	42a6      	cmp	r6, r4
 8005a4a:	d109      	bne.n	8005a60 <__libc_init_array+0x24>
 8005a4c:	4d0b      	ldr	r5, [pc, #44]	; (8005a7c <__libc_init_array+0x40>)
 8005a4e:	4c0c      	ldr	r4, [pc, #48]	; (8005a80 <__libc_init_array+0x44>)
 8005a50:	f000 f82e 	bl	8005ab0 <_init>
 8005a54:	1b64      	subs	r4, r4, r5
 8005a56:	10a4      	asrs	r4, r4, #2
 8005a58:	2600      	movs	r6, #0
 8005a5a:	42a6      	cmp	r6, r4
 8005a5c:	d105      	bne.n	8005a6a <__libc_init_array+0x2e>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a64:	4798      	blx	r3
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7ee      	b.n	8005a48 <__libc_init_array+0xc>
 8005a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6e:	4798      	blx	r3
 8005a70:	3601      	adds	r6, #1
 8005a72:	e7f2      	b.n	8005a5a <__libc_init_array+0x1e>
 8005a74:	08005bb4 	.word	0x08005bb4
 8005a78:	08005bb4 	.word	0x08005bb4
 8005a7c:	08005bb4 	.word	0x08005bb4
 8005a80:	08005bb8 	.word	0x08005bb8

08005a84 <memcpy>:
 8005a84:	440a      	add	r2, r1
 8005a86:	4291      	cmp	r1, r2
 8005a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a8c:	d100      	bne.n	8005a90 <memcpy+0xc>
 8005a8e:	4770      	bx	lr
 8005a90:	b510      	push	{r4, lr}
 8005a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a9a:	4291      	cmp	r1, r2
 8005a9c:	d1f9      	bne.n	8005a92 <memcpy+0xe>
 8005a9e:	bd10      	pop	{r4, pc}

08005aa0 <memset>:
 8005aa0:	4402      	add	r2, r0
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d100      	bne.n	8005aaa <memset+0xa>
 8005aa8:	4770      	bx	lr
 8005aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8005aae:	e7f9      	b.n	8005aa4 <memset+0x4>

08005ab0 <_init>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	bf00      	nop
 8005ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab6:	bc08      	pop	{r3}
 8005ab8:	469e      	mov	lr, r3
 8005aba:	4770      	bx	lr

08005abc <_fini>:
 8005abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005abe:	bf00      	nop
 8005ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac2:	bc08      	pop	{r3}
 8005ac4:	469e      	mov	lr, r3
 8005ac6:	4770      	bx	lr
